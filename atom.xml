<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uppy File Uploader</title>
  <icon>https://www.gravatar.com/avatar/430a3bdebe520801a4b4c53d1c8590c5</icon>
  <subtitle>Almost as cute as a puppy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://uppy.io/"/>
  <updated>2019-04-02T15:04:25.518Z</updated>
  <id>https://uppy.io/</id>
  
  <author>
    <name>Transloadit</name>
    <email>uppybot@uppy.io</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day 8</title>
    <link href="https://uppy.io/blog/2019/04/liftoff-08/"/>
    <id>https://uppy.io/blog/2019/04/liftoff-08/</id>
    <published>2019-04-02T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Day 8 of our ongoing thirty-day blog post challenge toward the <strong>Uppy 1.0 release on April 25</strong>! Yesterday was the 1st of April, but we had no time for fooling around! The entire team was present for our weekly call, which was again fully dedicated to discussing Uppy progress.</p><center><img width="400" src="/images/blog/30daystoliftoff/day08.jpg"><br><br></center><p>During the call, a lot of cards were moved from the <em>To Do</em> lane into the <em>In Progress</em> lane &#x2014; and some are even already <em>Done</em>. We also added a few <em>New</em> tasks mostly related to language packs for Uppy, where we&#x2019;ll be asking our own team members to update a locale of their own language. We hope other languages will be picked up by the community! </p><a id="more"></a><p>This is what our board currently looks like:</p><center><img src="/images/blog/30daystoliftoff/2019-04-board.png"><br><br></center><p>Let&#x2019;s take a look at the updates we can share with you today.</p><h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2><ul><li><a href="https://transloadit.com/about/#artur" target="_blank" rel="noopener">Artur</a> merged this <a href="https://github.com/transloadit/uppy/pull/1393" target="_blank" rel="noopener">PR</a> which removed the use of <code>window.location</code> from Companion&#x2019;s client, courtesy of <a href="https://transloadit.com/about/#ife" target="_blank" rel="noopener">Ife</a>.</li><li><a href="https://transloadit.com/about/#alex" target="_blank" rel="noopener">Alex</a> improved the design of the drag-to-upload stage. <br></li></ul><p>Before:<br></p><center><img width="400" src="/images/blog/30daystoliftoff/2019-04-02-before.png"></center><br>After:<br><br><center><img width="400" src="/images/blog/30daystoliftoff/2019-04-02-after.png"></center><ul><li><a href="https://github.com/lakesare" target="_blank" rel="noopener">Evgenia</a> made sure that <a href="https://github.com/transloadit/uppy/pull/1398" target="_blank" rel="noopener">file previews now form an even spread</a> across the width of the dashboard.</li></ul><h2 id="In-Progress"><a href="#In-Progress" class="headerlink" title="In Progress"></a>In Progress</h2><ul><li><p>We are currently investigating an <a href="https://github.com/tus/tus-js-client/issues/146" target="_blank" rel="noopener">issue</a> with <code>tus-js-client</code>, which affects uploads where the file size is larger than 500MB. Artur is now trying to execute a 600MB upload and then see if it crashes. After that, he will set chunkSize, test the upload again, and report back his findings so we can evaluate our next steps.</p></li><li><p>We are also doing more research on <code>tus-js-client</code> fingerprints. Since these are identical for each file on React Native, the team is figuring out how to properly identify files on that platform, because <a href="https://github.com/tus/tus-js-client/blob/master/lib/fingerprint.js#L10" target="_blank" rel="noopener">the standard file properties that tus-js-client relies on</a> are not available.</p></li><li><p>We have our first WIP screenshot for the React Native implementation:</p></li></ul><center><img width="400" src="/images/blog/30daystoliftoff/2019-04-02-wip-react-native.png"></center><ul><li><p><a href="https://transloadit.com/about/#abdel" target="_blank" rel="noopener">Abdel</a> is busy fixing the serverless examples where WebSockets are terminated when Uppy is deployed to Lambda</p></li><li><p>Evgenia is working on applying for <a href="https://www.browserstack.com/open-source?ref=pricing" target="_blank" rel="noopener">Browserstack</a>&#x2018;s open-source program, so we can hopefully test Uppy even more and make sure that 1.0 is without any issues.</p></li><li><p>Ife is writing tests for the implementation of the <code>tus-js-client</code> URL storage.</p></li></ul><p>That&#x2019;s all the updates I have for you today. See you tomorrow for Day 9 of our 30 Days to Liftoff!</p><p>P.S. If you don&#x2019;t want to miss an update, you might like to subscribe to our <a href="https://uppy.io/atom.xml">RSS feed</a> :)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to Day 8 of our ongoing thirty-day blog post challenge toward the &lt;strong&gt;Uppy 1.0 release on April 25&lt;/strong&gt;! Yesterday was the 1st of April, but we had no time for fooling around! The entire team was present for our weekly call, which was again fully dedicated to discussing Uppy progress.&lt;/p&gt;
&lt;center&gt;&lt;img width=&quot;400&quot; src=&quot;/images/blog/30daystoliftoff/day08.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/center&gt;

&lt;p&gt;During the call, a lot of cards were moved from the &lt;em&gt;To Do&lt;/em&gt; lane into the &lt;em&gt;In Progress&lt;/em&gt; lane — and some are even already &lt;em&gt;Done&lt;/em&gt;. We also added a few &lt;em&gt;New&lt;/em&gt; tasks mostly related to language packs for Uppy, where we’ll be asking our own team members to update a locale of their own language. We hope other languages will be picked up by the community! &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Day 7</title>
    <link href="https://uppy.io/blog/2019/04/liftoff-07/"/>
    <id>https://uppy.io/blog/2019/04/liftoff-07/</id>
    <published>2019-04-01T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Day 7 of our ongoing thirty-day blog post challenge toward the <strong>Uppy 1.0 release on April 25</strong>! With the weekend behind us and all batteries fully recharged, we&#x2019;re ready to start hacking away again at the forest of To Do&#x2019;s that lies in front of us.</p><p>We still have some updates from the end of last week to share with you, and our team is already working hard today on fixing issues and making improvements. So let&#x2019;s jump into it!</p><a id="more"></a><center><br><img width="400" src="/images/blog/30daystoliftoff/day07.png"><br></center><h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2><ul><li><a href="https://transloadit.com/about/#artur" target="_blank" rel="noopener">Artur</a> and <a href="https://transloadit.com/about/#kvz" target="_blank" rel="noopener">Kevin</a> <a href="https://github.com/transloadit/uppy/commit/130b79076c4cee54f1d6045f7ff359d1f46a9c72" target="_blank" rel="noopener">fixed CI builds</a> with <a href="https://github.com/transloadit/uppy/commit/5f4f1cf17e23c195d4a3907d7bb94599ec882ae6" target="_blank" rel="noopener">new</a> <a href="https://github.com/transloadit/uppy/commit/f0ca917a1e238e672540fd1a605c2dee8a81b195" target="_blank" rel="noopener">npm</a> scripts (that now explicitly opt into running Companion via <code>npm run dev:with-companion</code>) and by switching to a newer Chrome version for Windows 7 on Saucelabs. Kevin also cut down website deploy times by leveraging cache.</li><li><a href="https://transloadit.com/about/#ife" target="_blank" rel="noopener">Ife</a> <a href="https://github.com/transloadit/uppy/commit/c1abfea33d0c3e80809814c1048b156028c8fcf9" target="_blank" rel="noopener">fixed</a> a <a href="https://github.com/transloadit/uppy/issues/1390" target="_blank" rel="noopener">bug</a> in XHR Companion uploads.</li><li>Then Ife, Artur, and Kevin teamed up for the entire afternoon to deal with resumable uploads in RN, and got it to work inside an upload session. You can now hit Pause &amp; Resume! <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v8">&#x1F389;</span> It does not yet recover after a crash, but more on that under the <code>In Progress</code> section. One of the bigger hurdles addressed during this call was fixing websocket communication between Companion RN, so remote uploads done through Companion now report progress to the mobile app.</li><li><a href="https://transloadit.com/about/#renee" target="_blank" rel="noopener">Ren&#xE9;e</a> fixed <a href="https://github.com/transloadit/uppy/pull/1396" target="_blank" rel="noopener">a TypeScript issue</a> for people who do <code>allowSyntheticDefaultImports: false</code>.</li><li><a href="https://github.com/lakesare" target="_blank" rel="noopener">Evgenia</a> has <a href="https://github.com/transloadit/uppy/pull/1383" target="_blank" rel="noopener">removed the jumpiness</a> that occurred when Uppy was loading.</li><li><a href="https://transloadit.com/about/#alex" target="_blank" rel="noopener">Alex</a> improved the design of the statusbar for cases where the upload fails. <br><br>Before:<br><center><img width="400" src="/images/blog/30daystoliftoff/2019-04-liftoff-07a.png"></center><br>After:<br><br><center><img width="400" src="/images/blog/30daystoliftoff/2019-04-liftoff-07b.png"></center></li></ul><h2 id="In-Progress"><a href="#In-Progress" class="headerlink" title="In Progress"></a>In Progress</h2><ul><li>As mentioned, resumability in RN doesn&#x2019;t work yet after a crash. To fix this, Ife is trying to implement <a href="https://tus.io" target="_blank" rel="noopener">Tus</a> fingerprint storing in RN (as LocalStorage isn&#x2019;t available there). He&#x2019;ll first finish <a href="https://github.com/tus/tus-js-client/pull/73/files" target="_blank" rel="noopener">support for Node.js</a> and then add <a href="https://github.com/tus/tus-js-client#react-native-support" target="_blank" rel="noopener">React Native support for tus-js-client</a>.</li><li>Artur is working on making our RN example better to look at, showcasing a real progress bar, nice buttons for Pause &amp; Resume, as well as a first iteration on file previews. He&#x2019;ll also be pushing out a release with recent fixes, and give Evgenia&#x2019;s early work a smooth landing.</li><li>Ren&#xE9;e is writing tests to accomodate the change for <a href="https://github.com/transloadit/uppy/pull/1376" target="_blank" rel="noopener">better progress reporting</a> and has started on Transloadit Assembly Cancellation.</li><li>We&#x2019;re looking at a potentially <a href="https://github.com/tus/tus-js-client/issues/146" target="_blank" rel="noopener">big problem</a> when using tus-js-client inside React Native for large files, stay tuned!</li><li>Evgenia is working on the dashboard, improving how file previews are justified and testing browser compatibility.</li><li><a href="https://github.com/alexkolodko" target="_blank" rel="noopener">Alex Kolodko</a> (yes, that is indeed a different <a href="https://github.com/nqst" target="_blank" rel="noopener">Alex</a> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8">&#x1F604;</span>) has been drafting up some sketches for an iteration on our logo:</li></ul><center><img width="400" src="/images/blog/30daystoliftoff/2019-04-liftoff-07c.png"></center><p>And that&#x2019;s all the news we have for you today! Catch up with us <a href="/blog/2019/04/liftoff-08/">tomorrow</a> for more progress on our 30 Days to Liftoff! And of course, if you want to make sure you&#x2019;re not missing out on anything, feel free to subscribe to our <a href="https://uppy.io/atom.xml">RSS feed</a> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png?v8">&#x1F680;</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to Day 7 of our ongoing thirty-day blog post challenge toward the &lt;strong&gt;Uppy 1.0 release on April 25&lt;/strong&gt;! With the weekend behind us and all batteries fully recharged, we’re ready to start hacking away again at the forest of To Do’s that lies in front of us.&lt;/p&gt;
&lt;p&gt;We still have some updates from the end of last week to share with you, and our team is already working hard today on fixing issues and making improvements. So let’s jump into it!&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Day 6</title>
    <link href="https://uppy.io/blog/2019/03/liftoff-06/"/>
    <id>https://uppy.io/blog/2019/03/liftoff-06/</id>
    <published>2019-03-31T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Shh, it&#x2019;s Sunday, Uppy is sleeping in today <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f634.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f634.png?v8">&#x1F634;</span> We&#x2019;ll be taking the day off as well, as we gear up to go full throttle again in the morning. There&#x2019;s still a lot to do before the <strong>Uppy 1.0 launch on April 25</strong>! In the meantime, why don&#x2019;t you join us in letting sleeping dogs lie.</p><a id="more"></a><center><img width="400" src="https://media.giphy.com/media/26n6UOQke3xCpsbWo/giphy.gif"><br><br></center><p>We hope this drowsy puppy inspires you to have a great and relaxing remainder of your weekend. We&#x2019;ll have a lot more to share with you tomorrow, so see you on <a href="/blog/2019/04/liftoff-07/">Day 7</a> of our 30 Days to Liftoff!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Shh, it’s Sunday, Uppy is sleeping in today :sleeping: We’ll be taking the day off as well, as we gear up to go full throttle again in the morning. There’s still a lot to do before the &lt;strong&gt;Uppy 1.0 launch on April 25&lt;/strong&gt;! In the meantime, why don’t you join us in letting sleeping dogs lie.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Day 5</title>
    <link href="https://uppy.io/blog/2019/03/liftoff-05/"/>
    <id>https://uppy.io/blog/2019/03/liftoff-05/</id>
    <published>2019-03-30T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Work hard, play hard! It&#x2019;s Saturday, so it&#x2019;s time for us to wind down and take some time for ourself. Seeing as we won&#x2019;t have much to share over the weekend in terms of progress updates, we thought we&#x2019;d try to distract you a bit. Sit back, relax, and enjoy this nice GIF, handpicked by our crew:</p><a id="more"></a><center><img width="400" src="https://media.giphy.com/media/TL4d81cXH4THa/giphy.gif"><br><br></center><p>Just the thing we need to recharge those <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f50b.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f50b.png?v8">&#x1F50B;</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f50b.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f50b.png?v8">&#x1F50B;</span> to <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f4af.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4af.png?v8">&#x1F4AF;</span>, so we can start making a dent on <a href="/blog/2019/04/liftoff-07/">Monday</a> again. Hope you&#x2019;ll have a good one! :kissing_heart: </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Work hard, play hard! It’s Saturday, so it’s time for us to wind down and take some time for ourself. Seeing as we won’t have much to share over the weekend in terms of progress updates, we thought we’d try to distract you a bit. Sit back, relax, and enjoy this nice GIF, handpicked by our crew:&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Day 4</title>
    <link href="https://uppy.io/blog/2019/03/liftoff-04/"/>
    <id>https://uppy.io/blog/2019/03/liftoff-04/</id>
    <published>2019-03-29T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Today marks the fourth day of our ongoing thirty-day blog post challenge, giving you an overview of all the progress building up to our <strong>Uppy 1.0 release on April 25!</strong></p><a id="more"></a><center><br><img width="400" src="/images/blog/30daystoliftoff/day4.jpg"><br></center><h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2><p>We haven&#x2019;t even hit April 1 yet and the &#x2018;Done&#x2019; section of the project dashboard is already getting plenty of love! Today, <a href="https://github.com/nqst" target="_blank" rel="noopener">Alex</a> finished designing a specialized header for visitors of Uppy.io and <a href="https://tus.io" target="_blank" rel="noopener">Tus.io</a> to inform them about the discount on <a href="https://transloadit.com/" target="_blank" rel="noopener">Transloadit</a> services they can receive <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png?v8">&#x1F609;</span></p><p><a href="https://github.com/Kiloreux" target="_blank" rel="noopener">Adbel</a> started a dialogue with the team regarding <a href="https://github.com/transloadit/uppy/pull/138" target="_blank" rel="noopener">Docker secrets</a>, seeing as <a href="https://github.com/transloadit/uppy/issues/1295" target="_blank" rel="noopener">an issue</a> about this was reported. He decided that the best course of action was to follow the Kubernetes <a href="https://kubernetes.io/docs/concepts/configuration/secret/#best-practices" target="_blank" rel="noopener">best practices</a> and add a <code>Secret</code> resource to contain the environment variables.</p><h2 id="In-Progress"><a href="#In-Progress" class="headerlink" title="In Progress"></a>In Progress</h2><p>One of the more exciting updates of this day was also contributed by Alex, with his impressive pre-alpha sketch of a new homepage for Uppy. Despite only being a work in progress, the entire team has been overjoyed with how it&#x2019;s turning out! Take a look for yourself (click to see the full page):</p><center><a rel="noreferrer noopener" target="_blank" href="/images/blog/30daystoliftoff/2019-03-liftoff-04b.png"><img width="400" src="/images/blog/30daystoliftoff/2019-03-liftoff-04a.png"></a></center><p><a href="https://github.com/ifedapoolarewaju" target="_blank" rel="noopener">Ife</a> has been focused on <a href="https://github.com/transloadit/uppy/pull/1274/files" target="_blank" rel="noopener">fixing hanging Instagram files uploaded through Companion</a> and our content team&#x2019;s own <a href="https://github.com/samuelayo" target="_blank" rel="noopener">Samuel</a> added examples for <a href="https://github.com/transloadit/uppy/pull/1389" target="_blank" rel="noopener">handling uploads in Node.js, and in Python (using the Flask microframework)</a>. </p><p>And that&#x2019;s Day 4 complete! Catch up with us <a href="/blog/2019/03/liftoff-05/">tomorrow</a>, as we take this thing into our first weekend of the 30 Days to Liftoff! And of course, if you want to keep yourself constantly updated, feel free to subscribe to our <a href="https://uppy.io/atom.xml">RSS feed</a> <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8">&#x1F604;</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today marks the fourth day of our ongoing thirty-day blog post challenge, giving you an overview of all the progress building up to our &lt;strong&gt;Uppy 1.0 release on April 25!&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Day 3</title>
    <link href="https://uppy.io/blog/2019/03/liftoff-03/"/>
    <id>https://uppy.io/blog/2019/03/liftoff-03/</id>
    <published>2019-03-28T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Two days ago, we announced the <strong>upcoming launch of Uppy 1.0 on April 25</strong>, kicking off our thirty-day blog post challenge to keep you updated on everything that is going on. Here&#x2019;s day three for you!</p><a id="more"></a><p>We&#x2019;re still mostly busy tying up any remaining loose ends before April 1, when we&#x2019;ll really start our coding speedrun towards 1.0:</p><center><img width="400" src="/images/blog/30daystoliftoff/day3.jpg"><br></center><h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2><p><a href="https://github.com/arturi" target="_blank" rel="noopener">Artur</a> merged two pull requests from <a href="https://github.com/goto-bus-stop" target="_blank" rel="noopener">Ren&#xE9;e</a>. The <a href="https://github.com/transloadit/uppy/pull/1375" target="_blank" rel="noopener">first</a> one aims to use Transloadit Templates and demo keys for the <code>transloadit-textarea</code> example, and the <a href="https://github.com/transloadit/uppy/pull/1374" target="_blank" rel="noopener">second</a> one makes error reporting across different locales more flexible.</p><p>Artur also added a <a href="/examples/markdown-snippets/">GitHub-comment-inspired demo</a>. Add a file attachment to your markdown, and it will be uploaded and converted to a thumbnail that&#x2019;s displayed inside your post, no matter the media type (audio turns into artwork, images are resized, videos thumbnailed, etc.). </p><p><a href="https://github.com/ifedapoolarewaju" target="_blank" rel="noopener">Ife</a> reviewed and merged this <a href="https://github.com/transloadit/uppy/pull/1366" target="_blank" rel="noopener">pull request</a>, which updates the callback URIs to reflect their correct location in Companion. Thanks to <a href="https://github.com/HughbertD" target="_blank" rel="noopener">HughbertD</a> for that one!</p><p>We also celebrated Evgenia submitting her first two PRs: <a href="https://github.com/transloadit/uppy/pull/1382" target="_blank" rel="noopener">one</a> to make sure that tooltips can no longer overflow inside the Uppy container, and <a href="https://github.com/transloadit/uppy/pull/1383" target="_blank" rel="noopener">another</a> that removes the jumpiness when Uppy loads.</p><h2 id="In-Progress"><a href="#In-Progress" class="headerlink" title="In Progress"></a>In Progress</h2><p>Ren&#xE9;e is working hard to fix outdated warnings in our examples. Other than that, the team has been dealing with a Companion issue that invalid access tokens are given out when you select a provider to receive your file from. The aim is to return 401 for invalid access tokens, so that the <code>/authorized</code> endpoint can be deprecated. You can track the progress of this issue in its <a href="https://github.com/transloadit/uppy/pull/1298" target="_blank" rel="noopener">pull request</a>.</p><center><img src="/images/blog/30daystoliftoff/2019-03-27-board02.png"></center><h2 id="To-Do"><a href="#To-Do" class="headerlink" title="To Do"></a>To Do</h2><p>The biggest update that will be part of Uppy 1.0 is support for React Native. Yesterday, Ren&#xE9;e, Artur, Ife, <a href="https://github.com/lakesare" target="_blank" rel="noopener">Evgenia</a> and <a href="https://github.com/kvz" target="_blank" rel="noopener">Kevin</a> had a call and talked extensively about what would be needed to have a minimum viable product. They settled on the following six subtasks, which I&#x2019;m copying directly from their notes: :)</p><figure class="highlight md"><table><tr><td class="code"><pre>MVP for React Native support should:<span class="token list punctuation">-</span> [ ] get a link provider example to work, including showing Companion progress and resumability<span class="token list punctuation">-</span> [ ] get its own UI, (re)written for RN<span class="token list punctuation">-</span> [ ] make websocket progress from Companion work (see: https://facebook.github.io/react-native/docs/network#websocket-support)<span class="token list punctuation">-</span> [ ] have an example with buttons for resumability &amp; a progress bar<span class="token list punctuation">-</span> [ ] have resumability support within 20 min (easily tested by disabling WiFi on your workstation while uploading to master.tus.io)<span class="token list punctuation">-</span> [ ] have an example with basic file previews (Uppy RN itself likely does not offer previews)</pre></td></tr></table></figure><p>That&#x2019;s all the updates I have for you today. See you tomorrow for <a href="/blog/2019/03/liftoff-04/">Day 4</a> of our 30 Days to Liftoff!</p><p>P.S. If you don&#x2019;t want to miss an update, consider <a href="https://uppy.io/atom.xml">good ol&#x2019; RSS</a> :)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Two days ago, we announced the &lt;strong&gt;upcoming launch of Uppy 1.0 on April 25&lt;/strong&gt;, kicking off our thirty-day blog post challenge to keep you updated on everything that is going on. Here’s day three for you!&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Day 2</title>
    <link href="https://uppy.io/blog/2019/03/liftoff-02/"/>
    <id>https://uppy.io/blog/2019/03/liftoff-02/</id>
    <published>2019-03-27T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday, marked the beginning of our thirty-day blog post challenge to keep you updated on our preparations for <strong>releasing Uppy 1.0 on April 25</strong>. So here we are again already! </p><a id="more"></a><p>Our big coding speedrun towards for 1.0 starts April 1, so we are mostly busy with tying up loose ends, busting issues, and planning our work ahead.</p><center><img width="400" src="/images/blog/30daystoliftoff/day2.jpg"><br></center><h2 id="Our-roadmap-for-1-0"><a href="#Our-roadmap-for-1-0" class="headerlink" title="Our roadmap for 1.0"></a>Our roadmap for 1.0</h2><p>With so much still to do before Uppy 1.0 is ready go, it&#x2019;s important that we keep track of all the various tasks. We are doing this with help of an Uppy 1.0 project dashboard that we created in <a href="https://asana.com" target="_blank" rel="noopener">Asana</a>. This lets us see in an instant what everyone is working on and what the current status is on specific tasks. </p><p>We currently have our tasks divided into five sections, which are: <em>Nice To Have</em>, <em>To Do</em>, <em>In Progress</em> and <em>Done</em>. The tasks in the <em>To Do</em> and <em>In Progress</em> lanes (and of course those that are <em>Done</em>) are planned to make the 1.0 release. And if we have time on our side before the launch date, we&#x2019;ll also try to get as many of the <em>Nice To Have</em> tasks checked off as well.</p><p>We&#x2019;ve discussed our <a href="https://github.com/transloadit/uppy/blob/master/CHANGELOG.md#10-goals" target="_blank" rel="noopener">Changelog</a>&#x2018;s 1.0 goals and tried to re-prioritize and assign work. </p><p>We didn&#x2019;t manage to fit all of those <em>To Do</em>s in the picture, but here is a screenshot of what our board looks like at the moment:</p><center><img src="/images/blog/30daystoliftoff/2019-03-27-board02.png"></center><p>Aside from planning, we&#x2019;ve also been busy onboarding <a href="https://github.com/lakesare" target="_blank" rel="noopener">Evgenia</a> so she can hit the ground running April 1st.</p><p>And tomorrow, we&#x2019;ll look at the <em>To Do</em>s in more detail, so we can get a clearer idea of subtasks and who will do what, exactly.</p><p>That&#x2019;s all the updates I have for you today. See you tomorrow for <a href="/blog/2019/03/liftoff-03/">Day 3</a> of our 30 Days to Liftoff!</p><p>PS If you don&#x2019;t want to miss an update, consider <a href="https://uppy.io/atom.xml">good ol&#x2019; RSS</a> :)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yesterday, marked the beginning of our thirty-day blog post challenge to keep you updated on our preparations for &lt;strong&gt;releasing Uppy 1.0 on April 25&lt;/strong&gt;. So here we are again already! &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Day 1</title>
    <link href="https://uppy.io/blog/2019/03/liftoff-01/"/>
    <id>https://uppy.io/blog/2019/03/liftoff-01/</id>
    <published>2019-03-26T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>When we <a href="/blog/2016/07/uppy-begins/">started working on Uppy</a> back in early 2016, all we had was an idea and the shared desire to launch file uploading into a new age. We had already been laying the groundwork with the development of <a href="https://tus.io/" target="_blank" rel="noopener">tus.io</a> and felt that its robust back-end deserved a front-end just as robust, modern and user-friendly. </p><a id="more"></a><p>But what about open? We initially thought about building a proprietary uploader that would work exclusively with Transloadit&#x2019;s commercial service, but we quickly turned around on it. We knew this could have a real impact. So, just like we did with Tus, we decided to make our new project open source. Three years, <a href="https://github.com/transloadit/uppy/stargazers" target="_blank" rel="noopener">16.000 stargazers</a> and a thriving community later &#x2014; and we could not be happier. Well, apart from one thing: <strong>getting Uppy 1.0 out the door</strong> has proven harder than expected. Issues keep piling up, which led us down countless sidetracks and hurt our capacity to hammer out those final design goals. </p><p>But now it&#x2019;s time for all that to change. That&#x2019;s why, starting today, we are allocating all of Transloadit&#x2019;s resources into making a big final push and getting Uppy ready for liftoff. Our goal is to launch on <strong>April 25</strong>, exactly thirty days from now. </p><center><img width="400" src="https://media.giphy.com/media/kvw01ozJ06TxS/giphy.gif"><br><br></center><p>We&#x2019;ll need all the help we can get, so for the next thirty days, everyone here at Transloadit is going to be working exclusively on tasks related to Uppy 1.0. That means the Uppy core team (obviously) and tus core team, our SDK teams, as well as our infra &amp; API engineers, designers, content writers, and the founders themselves &#x2014; we&#x2019;ll all be chipping in and doing our part to ensure liftoff in thirty days. We&#x2019;re even adding someone new to the Uppy team in April. A warm welcome to <a href="https://github.com/lakesare" target="_blank" rel="noopener">Evgenia Karunus</a> :)</p><h2 id="A-new-post-every-day"><a href="#A-new-post-every-day" class="headerlink" title="A new post every day"></a>A new post every day</h2><p>We have added all tasks to a project board and thought it might be a fun idea to keep you updated on our day-to-day progress. So, we set ourselves an additional challenge: apart from getting Uppy ready for 1.0, we&#x2019;re also going to <strong>write a blog post about it every day</strong>, for thirty days. Starting with this one.</p><p>A post each day may prove hard to do, but we think it&#x2019;s worth a try. It really fits with the open way in which we have been developing Uppy for the past few years, and gives you a look behind the scenes as we&#x2019;re getting ready for the home stretch. And hopefully, we also succeed in spreading the word even further, reaching people that don&#x2019;t yet know about Uppy, but would be happy to!</p><h2 id="What&#x2019;s-Uppy-with-you"><a href="#What&#x2019;s-Uppy-with-you" class="headerlink" title="What&#x2019;s Uppy with you?"></a>What&#x2019;s Uppy with you?</h2><p>We&#x2019;d love to hear what you think. Whether it is about Uppy in general, or specific issues you feel cannot be forgotten before 1.0, or maybe even about this blog post challenge itself &#x2014; leave a comment here, use our <a href="https://community.transloadit.com/c/uppy" target="_blank" rel="noopener">forum</a> directly (it also hosts the comments), or let us know on Twitter via <a href="http://twitter.com/uppy_io/" target="_blank" rel="noopener">@uppy_io</a> or <a href="http://twitter.com/transloadit/" target="_blank" rel="noopener">@transloadit</a>. </p><!-- <center><img width="400"  class="dropshadow" src="https://media.giphy.com/media/RnX4q6yYDoYCI/giphy.gif"></center> --><center><img width="400" class="dropshadow" src="https://media.giphy.com/media/SjInxhAJTzU7S/giphy.gif"><br><br></center><p>We can use your help! As we&#x2019;ve said, we&#x2019;re looking to spread the word so any retweet, blog post, star, you name it, is gonna be double extra appreciated. Also, <a href="https://github.com/transloadit/uppy/issues" target="_blank" rel="noopener">issue busting</a> is going to slow down as we&#x2019;re about to head deep into the remaining design goals (e.g. React Native). So, if you want to lend a hand with that, we&#x2019;d owe you big time!</p><p>See you tomorrow for the first progress update on <a href="/blog/2019/03/liftoff-02/">Day 2</a> of our 30 Days to Liftoff!</p><p>PS If you don&#x2019;t want to miss an update, consider <a href="https://uppy.io/atom.xml">good ol&#x2019; RSS</a> :)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When we &lt;a href=&quot;/blog/2016/07/uppy-begins/&quot;&gt;started working on Uppy&lt;/a&gt; back in early 2016, all we had was an idea and the shared desire to launch file uploading into a new age. We had already been laying the groundwork with the development of &lt;a href=&quot;https://tus.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tus.io&lt;/a&gt; and felt that its robust back-end deserved a front-end just as robust, modern and user-friendly. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.30: Introducing Robodog</title>
    <link href="https://uppy.io/blog/2019/03/0.30/"/>
    <id>https://uppy.io/blog/2019/03/0.30/</id>
    <published>2019-03-06T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>In <code>0.30</code>, we are introducing a new friend for Uppy &#x2014; the Robodog.</p><p><img src="/images/blog/0.30/robodog-assemble.jpg"><br><small>Robodog: easy to assemble</small></p><a id="more"></a><h2 id="Robodog"><a href="#Robodog" class="headerlink" title="Robodog"></a>Robodog</h2><p>Uppy is developed by <a href="https://transloadit.com" target="_blank" rel="noopener">Transloadit</a>. Transloadit is the Swiss Army Knife for your files: importing, resizing, cropping and watermarking images, making GIFs, transcoding videos, extracting thumbnails, generating audio waveforms, and so much more &#x2014; all in a single service. Uppy has a similarly large feature set in dozens of plugins, but because of that it can be complicated to wire everything up for the best experience.</p><p><a href="https://uppy.io/docs/robodog/">Robodog</a> is a new Uppy-based library that has been trained to work with Transloadit. It includes three components:</p><ol><li><a href="https://uppy.io/docs/robodog/picker/">File picker</a>, using the Dashboard plugin you know and love for the modal UI, with support for imports from third-party services.</li><li><a href="https://uppy.io/docs/robodog/form/">Form</a>: integration with your existing HTML forms. Files will be uploaded to Transloadit, and the form will submit JSON information about the files and encoding results.</li><li><a href="https://uppy.io/docs/robodog/upload/">Upload</a>: one-line programmatic uploads &#x2014; call <code>transloadit.upload(files, opts)</code> and get an array of results back.</li></ol><center><img src="https://media.giphy.com/media/Eq7T3GwDAlggE/giphy.gif"></center><p>Here&#x2019;s a demo:</p><figure class="wide"><br>  <p class="codepen" data-height="600" data-theme-id="light" data-border-color="#EB2177" data-default-tab="js,result" data-user="uppy" data-slug-hash="gEgPav" style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="Robodog: resizing and optimizing your avatar"><br>    <span>See the Pen <a href="https://codepen.io/uppy/pen/gEgPav/" target="_blank" rel="noopener"><br>    Robodog: resizing and optimizing your avatar</a> by Uppy File Uploader (<a href="https://codepen.io/uppy" target="_blank" rel="noopener">@uppy</a>)<br>    on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br>  </p><br>  <script async src="https://static.codepen.io/assets/embed/ei.js"></script><br></figure><p>You can install Robodog from NPM:</p><figure class="highlight sh"><table><tr><td class="code"><pre>npm install @uppy/robodog --save </pre></td></tr></table></figure><p>Or import it by using an HTML script tag:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://transloadit.edgly.net/releases/uppy/v0.30.3/robodog.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://transloadit.edgly.net/releases/uppy/v0.30.3/robodog.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><center><img src="https://media.giphy.com/media/MqGA1Za9ar6lG/giphy.gif"></center><h2 id="Dashboard-Improvements"><a href="#Dashboard-Improvements" class="headerlink" title="Dashboard Improvements"></a>Dashboard Improvements</h2><p>As usual, we are making constant iterations and improvements to the Dashboard plugin. Accessibility has been improved, we&#x2019;ve updated and fixed some icons, breadcrumbs in remote providers, and the issue with <code>browserBackButton</code> and multiple modals.</p><h2 id="Progress-or-no-progress"><a href="#Progress-or-no-progress" class="headerlink" title="Progress or no progress"></a>Progress or no progress</h2><p>We&#x2019;ve improved how the StatusBar behaves when no progress reporting is available (which is <a href="https://github.com/transloadit/uppy/pull/1184" target="_blank" rel="noopener">the case for MS Edge</a>):</p><p><img src="/images/blog/0.30/unknown-progress.gif"></p><h2 id="Upload-Success"><a href="#Upload-Success" class="headerlink" title="Upload Success"></a>Upload Success</h2><p>&#x26A0;&#xFE0F; Breaking</p><p>We&#x2019;ve changed <a href="https://uppy.io/docs/uppy/#upload-success"><code>upload-success</code></a> and <a href="https://uppy.io/docs/uppy/#upload-error"><code>upload-error</code></a> signatures.</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'upload-success'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> responseObject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token comment">// (depending on the uploader plugin used, it might contain</span>  <span class="token comment">// less info, the example is for @uppy/xhr-upload)</span>  <span class="token comment">// responseObject = {</span>  <span class="token comment">//   status, // HTTP status code (0, 200, 300)</span>  <span class="token comment">//   body, // response body</span>  <span class="token comment">//   uploadURL // the file url, if it was returned</span>  <span class="token comment">// }</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'upload-error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> responseObject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token comment">// responseObject = {</span>  <span class="token comment">//   status, // HTTP status code (0, 200, 300)</span>  <span class="token comment">//   body // response body</span>  <span class="token comment">// }</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><a href="https://uppy.io/docs/uppy/">See the docs</a> and <a href="https://github.com/transloadit/uppy/pull/1138" target="_blank" rel="noopener">PR #1138</a> for more details.</p><h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><ul><li>@uppy/robodog: &#x1F4E3;&#x26A0;&#xFE0F; Add Robodog &#x2014; Transloadit browser SDK (#1135 / @goto-bus-stop)</li><li>@uppy/dashboard: fixed issue with <code>browserBackButton</code> history and multiple modals (#1258 / @goto-bus-stop, @arturi)</li><li>@uppy/core: Set response in Core rather than in upload plugins (#1138 / @arturi)</li><li>@uppy/core: Don&#x2019;t emit a complete event if an upload has been canceled (#1271 / @arturi)</li><li>@uppy/companion: Support Redis option (auth_pass, etc&#x2026;) (#1215 / @tranvansang)</li><li>@uppy/companion: Sanitize text before adding to html (f77a102 / @ifedapoolarewaju)</li><li>@uppy/dashboard: Update pause-resume-cancel icons (#1241 / @arturi, @nqst)</li><li>@uppy/dashboard: Fix issues with multiple modals (#1258 / @goto-bus-stop, @arturi)</li><li>@uppy/dashboard: Dashboard ui fixes: fix icon animation jiggling, inherit font, allow overriding outline, fix breadcrumbs, bug with x button being stuck, fix an issue with long note margin on mobile (#1279 / @arturi)</li><li>@uppy/provider-views: update instagram nextPagePath after every fetch  (25e31e5 / @ifedapoolarewaju)</li><li>@uppy/react: Allow changing instance in <code>uppy</code> prop (#1247 / @goto-bus-stop)</li><li>@uppy/react: Typescript: Make DashboardModal.target prop optional (#1254 / @mattes3)</li><li>@uppy/aws-s3: Use user-provided filename / type for uploaded object, fixes #1238 (#1257 / @goto-bus-stop)</li><li>@uppy/tus: Update to <a href="mailto:tus-js-client@1.6.0" target="_blank" rel="noopener">tus-js-client@1.6.0</a> with React Native support (#1250 / @arturi)</li><li>build: Improve dev npm script: use Parcel for bundled example, re-build lib automatically, don&#x2019;t open browser and no ghosts mode, start companion when developing (but there&#x2019;s optional npm run dev:no-companion) (#1280 / @arturi)</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In &lt;code&gt;0.30&lt;/code&gt;, we are introducing a new friend for Uppy — the Robodog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/0.30/robodog-assemble.jpg&quot;&gt;&lt;br&gt;&lt;small&gt;Robodog: easy to assemble&lt;/small&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.29: separate Core and Plugin styles, React Native in tus-js-client</title>
    <link href="https://uppy.io/blog/2018/12/0.29/"/>
    <id>https://uppy.io/blog/2018/12/0.29/</id>
    <published>2018-12-11T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/blog/0.29/uppy-core-plugins-separate-styles.jpg"></p><p><code>0.29</code> brings bug fixes and improvements, while we are busy working on Uppy React Native support (which first had to <a href="https://github.com/tus/tus-js-client#react-native-support" target="_blank" rel="noopener">land in the js client for our resumable file upload protocol: tus.io</a>) and a Preset (still debating the name) which will make it easier to leverage Transloadit&#x2019;s encoding platform, and offer a smooth migration path for users not yet on Uppy. The highlights of this release are: separating Core and Plugin styles, more accurate progress reporting by factoring in sizes across files, adding a <code>responseType</code> option for XHR Upload, and fixing visual Webcam bugs.</p><a id="more"></a><h2 id="Separate-Core-and-Plugin-styles"><a href="#Separate-Core-and-Plugin-styles" class="headerlink" title="Separate Core and Plugin styles"></a>Separate Core and Plugin styles</h2><p><strong>&#x26A0;&#xFE0F; breaking</strong></p><p>When installing <code>uppy</code> and Plugins from npm, you had to include their styles. Prior to this release, you only had to include the Plugin&#x2019;s CSS, say, for <code>@uppy/webcam</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">import</span> Uppy <span class="token keyword">from</span> <span class="token string">'@uppy/core'</span><span class="token keyword">import</span> Webcam <span class="token keyword">from</span> <span class="token string">'@uppy/webcam'</span><span class="token keyword">import</span> <span class="token string">'@uppy/webcam/dist/style.css'</span></pre></td></tr></table></figure><p>Each plugin&#x2019;s file contained the Core styles. If you added multiple plugins, the core styles ended up being duplicated. This bloated file sizes and could even break styles entirely because of CSS&#x2019;s precedence rules.</p><p>Now, you have to include &#x201C;general&#x201D; styles from <code>@uppy/core</code> as well:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">import</span> Uppy <span class="token keyword">from</span> <span class="token string">'@uppy/core'</span><span class="token keyword">import</span> Webcam <span class="token keyword">from</span> <span class="token string">'@uppy/webcam'</span><span class="token keyword">import</span> <span class="token string">'@uppy/core/dist/style.css'</span> <span class="token comment">// &lt;-- add this separately and one time only</span><span class="token keyword">import</span> <span class="token string">'@uppy/webcam/dist/style.css'</span></pre></td></tr></table></figure><p>Thus, the Core styles are only included once. <code>@uppy/core</code> styles must be included before Plugin styles.</p><p>Please see the <a href="https://uppy.io/docs/plugins/">documentation</a> for the Plugin you are using to find out whether it requires a CSS file to work. Generally speaking, UI plugins, such as the Dashboard, Webcam and Status Bar, need a CSS file, while utility plugins, such as Tus or XHR Upload, don&#x2019;t.</p><p>&#x26A0;&#xFE0F; Important things to remember:</p><ol><li>Dashboard is a universal UI that comes with the Status Bar and Informer Plugins built in, and as such, Dashboard styles already come with the Informer and Status Bar styles.</li><li>Dashboard also ships with &#x201C;Remote Provider&#x201D; styles &#x2014; you don&#x2019;t need to include anything besides <code>@uppy/dashboard/dist/style.css</code> for Google Drive, Instagram and Dropbox to work. However, the Url and Webcam plugins still have to be included manually. Here&#x2019;s an example:</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">import</span> Uppy <span class="token keyword">from</span> <span class="token string">'@uppy/core'</span><span class="token keyword">import</span> Dashboard <span class="token keyword">from</span> <span class="token string">'@uppy/webcam'</span><span class="token keyword">import</span> GoogleDrive <span class="token keyword">from</span> <span class="token string">'@uppy/google-drive'</span><span class="token keyword">import</span> Webcam <span class="token keyword">from</span> <span class="token string">'@uppy/webcam'</span><span class="token keyword">import</span> Url <span class="token keyword">from</span> <span class="token string">'@uppy/url'</span><span class="token comment">// Core and Dashboard styles, then Webcam and Url, but not for GoogleDrive —</span><span class="token comment">// those come with Dashboard</span><span class="token keyword">import</span> <span class="token string">'@uppy/core/dist/style.css'</span><span class="token keyword">import</span> <span class="token string">'@uppy/dashboard/dist/style.css'</span><span class="token keyword">import</span> <span class="token string">'@uppy/webcam/dist/style.css'</span><span class="token keyword">import</span> <span class="token string">'@uppy/url/dist/style.css'</span></pre></td></tr></table></figure><h2 id="Using-File-Sizes-For-Progress-Calculation"><a href="#Using-File-Sizes-For-Progress-Calculation" class="headerlink" title="Using File Sizes For Progress Calculation"></a>Using File Sizes For Progress Calculation</h2><p>When possible, file sizes are now used for calculating the total progress. Before, we&#x2019;ve used uploaded percentage for each file. Meaning that if you were uploading four files &#x2014; and three small were already uploaded, while one very large file was still in progress &#x2014; Uppy might still display progress as being 90%. Long story short, Uppy now has a more accurate progress bar &#x1F680;</p><p>Some internal details, if you are interested:</p><ol><li>If there are files without sizes, the average size of all other files is assumed for the unsized files.</li><li>If there are no files with sizes, the percentage is just based on the percentages of the unsized files.</li></ol><p><img src="/images/blog/0.29/progress-size-calculation.jpg"></p><h2 id="responseType-For-XHR-Upload"><a href="#responseType-For-XHR-Upload" class="headerlink" title="responseType For XHR Upload"></a><code>responseType</code> For XHR Upload</h2><p>When using XHR Upload, you can now configure the XMLHttpRequest <code>.responseType</code> value. This allows the S3 Plugin to tell Firefox not to log XML errors when getting empty responses, so it finally fixes the spurious warnings that were caused by this, see <a href="https://github.com/transloadit/uppy/issues/518" target="_blank" rel="noopener">#518</a>.</p><p>Because AwsS3 now sets <code>responseType</code>: <code>&apos;text&apos;</code>, we can no longer use the <code>responseXML</code> property. We already did text based parsing for successful responses, and will now do the same for error responses.</p><h2 id="Misc-Changes"><a href="#Misc-Changes" class="headerlink" title="Misc Changes"></a>Misc Changes</h2><ul><li>@uppy/core: Don&#x2019;t pass removed file IDs to next upload step, fixes (#1148 / @goto-bus-stop)</li><li>@uppy/core: Fixed getFileType() when passed a file with an uppercase extension (#1169 / @jderrough)</li><li>@uppy/companion: Use <code>createCipheriv</code> instead of deprecated <code>createCipher</code> (#1149 / @goto-bus-stop)</li><li>@uppy/companion: Store Provider instances on <code>this.provider</code> instead of <code>this[this.id]</code> (@goto-bus-stop / #1174)</li><li>@uppy/companion: Pin grant to known stable version (@ifedapoolarewaju / #1165)</li><li>@uppy/companion: Fix &#x2014; socket does not handle server.path option (#1142 / @tranvansang)</li><li>@uppy/webcam: Fix a bug with Webcam video overflowing its container (68730f8a1bf731898d46883e00fed937d3ab54ab / @arturi)</li><li>docs: Add <code>triggerUploadOnSubmit</code> to Form docs, add docs about options of hiding upload/pause/resume/cancel buttons; talk about bundler-less polyfill use (@goto-bus-stop, @arturi)</li><li>@uppy/react: Allow Dashboard props width and height to accept a string for 100% (#1129 / craigcbrunner)</li></ul><p>See the <a href="https://github.com/transloadit/uppy/blob/master/CHANGELOG.md#0290" target="_blank" rel="noopener">full changelog (0.29)</a> for more details.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/0.29/uppy-core-plugins-separate-styles.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0.29&lt;/code&gt; brings bug fixes and improvements, while we are busy working on Uppy React Native support (which first had to &lt;a href=&quot;https://github.com/tus/tus-js-client#react-native-support&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;land in the js client for our resumable file upload protocol: tus.io&lt;/a&gt;) and a Preset (still debating the name) which will make it easier to leverage Transloadit’s encoding platform, and offer a smooth migration path for users not yet on Uppy. The highlights of this release are: separating Core and Plugin styles, more accurate progress reporting by factoring in sizes across files, adding a &lt;code&gt;responseType&lt;/code&gt; option for XHR Upload, and fixing visual Webcam bugs.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.28: A look behind the scenes</title>
    <link href="https://uppy.io/blog/2018/11/0.28/"/>
    <id>https://uppy.io/blog/2018/11/0.28/</id>
    <published>2018-11-05T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p><img class="border" src="/images/blog/0.28/dashboard-uploading.jpg"></p><p>In <code>0.28</code>, we are introducing a new &#x201C;Single Upload&#x201D; mode, improving on the Status Bar plugin with a spinner and different pause/resume/cancel buttons. We&#x2019;ll also share some progress on bringing back unified locale packs and a Transloadit Preset &#x1F341;</p><a id="more"></a><h2 id="Single-Uploads"><a href="#Single-Uploads" class="headerlink" title="Single Uploads"></a>Single Uploads</h2><p>Uppy has been flexible about uploading lots of things from the start. You can add files at any time, even after uploads have already started. This is neat, but not always the desired behaviour: sometimes, you just want to upload a few files together with a form. In that case, it&#x2019;s useful to allow users to only upload a set of files <em>once</em>. 0.28.0 adds some options to help with that!</p><p>An upload in Uppy terminology can be more than one file. Users can add a bunch of files and when they press &#x201C;Upload&#x201D;, all those files are bunched up into an upload. They can then add more files and press the &#x201C;Upload&#x201D; button again: the <em>new</em> files are bunched into a second upload.</p><p>The new <a href="https://uppy.io/docs/uppy/#allowMultipleUploads-true"><code>allowMultipleUploads</code></a> option in Uppy Core can be set to <code>false</code> to only allow a single one of those uploads. Once an upload is started, the Dashboard and Status Bar no longer show &#x201C;add files&#x201D; and &#x201C;upload&#x201D; buttons. You can listen for a &#x2018;complete&#x2019; event and then safely continue your app&#x2019;s form flow.</p><p>The Dashboard also has a new option: <a href="https://uppy.io/docs/dashboard/#closeAfterFinish-false"><code>closeAfterFinish</code></a>. When <code>true</code>, the modal Dashboard will automatically hide once an upload has completed. You should only use this option in conjunction with <code>allowMultipleUploads</code>, otherwise it might close the Dashboard when the user isn&#x2019;t done yet! It can only be used with the modal Dashboard, when <a href="https://uppy.io/docs/dashboard/#inline-false"><code>inline</code></a> is set to <code>false</code>. &#x201C;Closing&#x201D; an inline Dashboard makes no sense <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8">&#x1F604;</span> You will see a warning in the console in both cases, so you don&#x2019;t have to remember all that.</p><p>Speaking of the Dashboard, it now also shows more statuses in the title bar: &#x201C;Upload complete&#x201D;, &#x201C;Upload paused&#x201D;, &#x201C;Processing 5 files&#x201D; and &#x201C;Uploading 5 files&#x201D;.</p><h2 id="Status-Bar-improvements"><a href="#Status-Bar-improvements" class="headerlink" title="Status Bar improvements"></a>Status Bar improvements</h2><ul><li>&#x26A0;&#xFE0F; <strong>breaking</strong> We&#x2019;ve added separate options for hiding pause/resume and cancel buttons. So now there are several options for buttons: <code>hideUploadButton</code>, <code>hideRetryButton</code>, <code>hidePauseResumeButton</code> and <code>hideCancelButton</code>. These options can be passed from the Dashboard, if you are not using Status Bar separately (most common case). See the docs for more info: <a href="https://uppy.io/docs/status-bar/">https://uppy.io/docs/status-bar/</a>.</li><li>The Status Bar now features a spinner animation when upload is in progress.</li><li>Encoding (with the Transloadit plugin, for example) and uploading progress now get different colors, so it&#x2019;s easier to tell what&#x2019;s happening, visually.</li></ul><p><img class="border" style="border-top: 0;" src="/images/blog/0.28/status-bar-uploading.png"></p><p><img class="border" style="border-top: 0;" src="/images/blog/0.28/status-bar-paused.png"></p><p><img class="border" style="border-top: 0;" src="/images/blog/0.28/status-bar-encoding.png"></p><p><img class="border" style="border-top: 0;" src="/images/blog/0.28/status-bar-complete.png"></p><h2 id="Locale-packs"><a href="#Locale-packs" class="headerlink" title="Locale packs"></a>Locale packs</h2><p>In the beginning, we used to have unified locale packs for text strings in Uppy &#x2014; English, Russian, German, Polish, etc. Then we made a switch to per-plugin locales, and the ability to load one file with locale strings in any language (locale pack) was lost for a while. This release is the first step in bringing this functionality back.</p><p>With this change, you can load a locale pack like so: <code>const uppy = Uppy({locale: german})</code>, then still override specific strings in a certain plugin, if needed:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> uppy <span class="token operator">=</span> <span class="token function">Uppy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>locale<span class="token punctuation">:</span> german<span class="token punctuation">}</span><span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Dashboard<span class="token punctuation">,</span> <span class="token punctuation">{</span>  trigger<span class="token punctuation">:</span> <span class="token string">'#pick-files'</span><span class="token punctuation">,</span>  locale<span class="token punctuation">:</span> <span class="token punctuation">{</span>    strings<span class="token punctuation">:</span> <span class="token punctuation">{</span>      dropPasteImport<span class="token punctuation">:</span> <span class="token string">'Something else here, %{browse} or this'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>The benefit to this is that there will be a central point of configuration for languages, so there could be language packs with strings for, e.g., Czech at @uppy/lang-cz (or @uppy/langs/cz) that would be very easy to contribute to (or use).</p><p>After Uppy 0.28.0, this functionality is technically possible, but we still need to update and publish locale packs for multiple languages.</p><h2 id="Hosted-Companion-with-Transloadit"><a href="#Hosted-Companion-with-Transloadit" class="headerlink" title="Hosted Companion with Transloadit"></a>Hosted Companion with Transloadit</h2><p>When using remote providers such as Google Drive and Dropbox, so that your users can pick files from these sources, you can host <a href="https://uppy.io/docs/companion/">Companion</a> yourself, or use the one provided by Transloadit. And to simplify the latter, you can now use <code>Transloadit.COMPANION</code> and <code>Transloadit.COMPANION_PATTERN</code> constants in remote provider options:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> Dropbox <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@uppy/dropbox'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Transloadit <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@uppy/transloadit'</span><span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Dropbox<span class="token punctuation">,</span> <span class="token punctuation">{</span>  serverUrl<span class="token punctuation">:</span> Transloadit<span class="token punctuation">.</span><span class="token constant">COMPANION</span>  serverPattern<span class="token punctuation">:</span> Transloadit<span class="token punctuation">.</span><span class="token constant">COMPANION_PATTERN</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>Please see <a href="https://uppy.io/docs/transloadit/">Transloadit plugin documentation</a> for more details.</p><h2 id="Transloadit-Preset"><a href="#Transloadit-Preset" class="headerlink" title="Transloadit Preset"></a>Transloadit Preset</h2><p>Lately, we&#x2019;ve been working on a wrapper package around Uppy and the <a href="https://uppy.io/docs/transloadit/">Transloadit plugin</a> that will make common Transloadit-based workflows much simpler to implement. It&#x2019;s not ready just yet, but it should land in the next month!</p><p>This &#x201C;preset&#x201D; will provide three or so simple methods:</p><ul><li><code>transloadit.form()</code>, to enhance a form with existing file <code>&lt;input&gt;</code>s with Transloadit encoding capabilities, powered by Uppy&#x2019;s resilient uploading plugins</li><li><code>transloadit.modal()</code>, to show a one-off modal Dashboard that uploads to Transloadit&#x2019;s encoding backend</li><li><code>transloadit.upload()</code>, to instruct Uppy to upload files, using your own UI instead</li></ul><p>Stay tuned!</p><h2 id="Other-Cool-Changes"><a href="#Other-Cool-Changes" class="headerlink" title="Other Cool Changes"></a>Other Cool Changes</h2><ul><li>@uppy/core: &#x26A0;&#xFE0F; <strong>breaking</strong> remove <code>upload-cancel</code> event, <code>file-removed</code> should be enough, see <a href="https://github.com/transloadit/uppy/pull/1069" target="_blank" rel="noopener">#1069</a> for details</li><li>@uppy/companion: &#x26A0;&#xFE0F; <strong>breaking</strong> Migrated provider adapter to Companion: saves 5KB on the frontend, all heavy lifting moved to the server side</li><li>@uppy/companion: Removed an erroneous TypeScript dependency that added 40MB to the install size</li><li>@uppy/thumbnail-generator: You can now constrain thumbnail height, thanks to @richartkeil, see <a href="https://github.com/transloadit/uppy/pull/1096" target="_blank" rel="noopener">#1096</a> for documentation (we are planning to add real Thumbnail Generator documentation soon, too!)</li><li>@uppy/webcam: Fix getting data from Webcam recording if mime type includes codec metadata (<a href="https://github.com/transloadit/uppy/pull/1094" target="_blank" rel="noopener">#1094</a> / @goto-bus-stop)</li><li>meta: Added integration tests (in real browsers, thanks to Sauce Labs) for @uppy/url, @uppy/transloadit and @uppy/thumbnail-generator &#x1F680;</li></ul><p>See <a href="https://github.com/transloadit/uppy/blob/master/CHANGELOG.md#0280" target="_blank" rel="noopener">full changelog (0.28 and 0.27.x patches) for more</a></p><p>See you in the next release!</p><p>The Uppy Team</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img class=&quot;border&quot; src=&quot;/images/blog/0.28/dashboard-uploading.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;0.28&lt;/code&gt;, we are introducing a new “Single Upload” mode, improving on the Status Bar plugin with a spinner and different pause/resume/cancel buttons. We’ll also share some progress on bringing back unified locale packs and a Transloadit Preset 🍁&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.27: First Swing at React Native Support</title>
    <link href="https://uppy.io/blog/2018/08/0.27/"/>
    <id>https://uppy.io/blog/2018/08/0.27/</id>
    <published>2018-08-23T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/blog/0.27/uppy-add-initial.jpg"></p><p>In <code>0.27</code>, we have some more iterations on the Dashboard UI for you in store again. We are getting rid of the permanent tab bar and made tons of other improvements!</p><a id="more"></a><h2 id="Dashboard-UI-without-tabs"><a href="#Dashboard-UI-without-tabs" class="headerlink" title="Dashboard UI without tabs"></a>Dashboard UI without tabs</h2><p>Uppy used to always display the tab bar (the one you use to select between importing files from Instagram, Webcam, local disk, etc.). This ended up not working well with the growing list of supported sources, especially on mobile.</p><p><img src="/images/blog/0.27/uppy-with-tabs.jpg"></p><p>So in <code>0.27</code>, we are iterating on the UI again:</p><p><img src="/images/blog/0.27/uppy-add-initial.jpg"></p><p>The providers are now visible as a list of icons on the initial screen (plus, we&#x2019;ve added colors!), but when you complete the inital selection, it is hidden behind the &#x201C;plus&#x201D; button:</p><p><img src="/images/blog/0.27/uppy-files-selected.jpg"></p><p>You can always add more:</p><p><img src="/images/blog/0.27/uppy-add-more.jpg"></p><p>The StatusBar that shows progress has been &#x201C;lightened&#x201D;:</p><p><img src="/images/blog/0.27/uppy-upload-in-progress.jpg"></p><p><img src="/images/blog/0.27/uppy-upload-complete.jpg"></p><p>We have decided to drop multiple-color support, so Informer messages will now always appear in a gray, round bubble. Apart from that, we have made tons of small fixes, such as better animations, colors, font sizes, and more. <a href="https://github.com/transloadit/uppy/pull/942" target="_blank" rel="noopener">Check out the PR #942</a> for details.</p><p>We are aiming to make the UI less heavy, so that Uppy can easier fit within your existing site or app design.</p><p>The mobile version is now much more refined as well:</p><p><img src="/images/blog/0.27/uppy-mobile.jpg"></p><p>As always, feel free to <a href="https://uppy.io/examples/dashboard/">try Uppy live on the Dashboard example</a>.</p><h2 id="autoProceed-false-by-default"><a href="#autoProceed-false-by-default" class="headerlink" title="autoProceed: false by default"></a><code>autoProceed: false</code> by default</h2><p>&#x26A0;&#xFE0F; <strong>breaking</strong></p><p>By default, Uppy used to begin uploading right after you selected a file. If you wanted to let users edit some file metadata or pick and choose from multiple sources first, you had to set <code>autoProceed: false</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token comment">// this line could be seen in many of the Uppy examples</span><span class="token keyword">const</span> uppy <span class="token operator">=</span> <span class="token function">Uppy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> autoProceed<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>Since in most cases we actually wanted <code>autoProceed: false</code>, this is now the new default. While it makes Uppy&#x2019;s UI less magical and harder to make irreversible mistakes with, right out of the box, we feel this is the way to go. Make sure you change this in your project if needed. If you weren&#x2019;t setting an <code>autoProceed</code> option at all, you will now have to add <code>autoProceed: true</code>.</p><h2 id="Progress-on-React-Native"><a href="#Progress-on-React-Native" class="headerlink" title="Progress on React Native"></a>Progress on React Native</h2><p>We&#x2019;ve begun working on supporting React Native in Uppy. Since <code>0.27</code>, it should run in a React Native environment &#x2014; meaning you can use Uppy API (<code>uppy.addFile()</code>, <code>uppy.upload()</code>) for adding files and uploading, without the UI. <code>@uppy/xhr-upload</code> uploader is already supported, and we are working on making <code>@uppy/tus</code> (and <code>tus-js-client</code> itself) run in React Native as well.</p><p>We plan to make sure all non-UI Uppy plugins work in RN, and then provide a few useful components for adding Uppy to your RN apps.</p><p>Please head to the <a href="https://github.com/transloadit/uppy/pull/988" target="_blank" rel="noopener">React Native PR #988</a> for details. We&#x2019;d love to hear what you think and your suggestions for improving the Uppy React Native experience.</p><p>Built-in React Native support has been a 1.0 goal from the start. We have had many requests about Angular.js and Vue support. There are already community-built solutions for these platforms that seem to work well, but unfortunately we won&#x2019;t be officially supporting them before our 1.0 milestone. Depending on community input, we might add that later.</p><h2 id="Package-sizes"><a href="#Package-sizes" class="headerlink" title="Package sizes"></a>Package sizes</h2><p>We now have a cool table showing mingzipped bundle sizes for each individual Uppy package, <a href="https://uppy.io/docs/stats/#bundle-sizes">check it out</a>:</p><p><img width="400" src="/images/blog/0.27/uppy-sizes.png"></p><h2 id="&#x201C;Uppy-Server&#x201D;-is-now-&#x201C;Companion&#x201D;"><a href="#&#x201C;Uppy-Server&#x201D;-is-now-&#x201C;Companion&#x201D;" class="headerlink" title="&#x201C;Uppy Server&#x201D; is now &#x201C;Companion&#x201D;"></a>&#x201C;Uppy Server&#x201D; is now &#x201C;Companion&#x201D;</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="token function">npm</span> <span class="token function">install</span> @uppy/companion</pre></td></tr></table></figure><p>Uppy Server is an optional service that Uppy can use to import files from sources like Instagram or Dropbox. However, simply naming it &#x201C;Server&#x201D; was quite unclear and has caused some confusion. Many people thought you could upload files to Uppy Server as well, but that is not the case. We recommend uploading to a <a href="https://tus.io" target="_blank" rel="noopener">tus.io</a> server, or &#x2014; if that&#x2019;s too much for your simple usecase &#x2014; using your existing webserver to handle the upload. </p><p>So, to hopefully end this confusion once and for all, we are renaming Uppy Server to Companion: an optional tool in the datacenter, which you can use to add more functionality to your Uppy.js client. If nothing else, maybe it will net us some points for having yet another dog-themed name!</p><p>Simultaneously, we moved Companion into the main <a href="https://github.com/transloadit/uppy" target="_blank" rel="noopener">transloadit/uppy</a> <a href="https://github.com/babel/babel/blob/master/doc/design/monorepo.md" target="_blank" rel="noopener">monorepo</a>. This centralizes Uppy issue reporting and makes it easier to do updates and simultaneous releases of the client and Companion parts.</p><p>The first release of <code>@uppy/companion</code> is 0.14, and the last <code>uppy-server</code> release is 0.13.4. <code>uppy-server</code> will be deprecated on npm soon.</p><p>Note that despite the rename, configuration for standalone Companion still uses <code>UPPYSERVER_</code> environment variables. This should ease the transition, since you will only have to update the package name for now. Once we add <code>COMPANION_</code> variable support, we will continue to support <code>UPPYSERVER_</code> environment variables to smoothen the transition. And of course, we will notify you here when that time comes!</p><h2 id="Other-Cool-Changes"><a href="#Other-Cool-Changes" class="headerlink" title="Other Cool Changes"></a>Other Cool Changes</h2><ul><li>@uppy/core: allow editing plugin titles (names) so that, for instance, &#x201C;Camera&#x201D; can be translated into different languages, fixes #920 (#942 / @arturi)</li><li>@uppy/dashboard: fix animation &#x2014; wait for closing animation to finish before opening modal (#942 / @arturi)</li><li>@uppy/url: fix Url plugin reacting to wrong drop/paste events, add ignoreEvent (#942 / @arturi)</li><li>build: build: Split integration tests and add one using create-react-app (#952 / @goto-bus-stop)</li><li>@uppy/companion: google Drive &#x2014; move to v3 API (#977 / @pauln)</li></ul><p>See <a href="https://github.com/transloadit/uppy/blob/master/CHANGELOG.md#0270" target="_blank" rel="noopener">full changelog (0.27 and 0.26.x patches) for more</a></p><p>See you in the next release!</p><p>The Uppy Team</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/0.27/uppy-add-initial.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;0.27&lt;/code&gt;, we have some more iterations on the Dashboard UI for you in store again. We are getting rid of the permanent tab bar and made tons of other improvements!&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.26: Lerna</title>
    <link href="https://uppy.io/blog/2018/07/0.26/"/>
    <id>https://uppy.io/blog/2018/07/0.26/</id>
    <published>2018-07-12T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Uppy 0.26 replaces the monolithic Uppy package with a separate npm package for every plugin.</p><p><img width="448" src="/images/blog/0.26/uppy-multiple-packages.png"></p><a id="more"></a><h2 id="Lerna"><a href="#Lerna" class="headerlink" title="Lerna"></a>Lerna</h2><p>&#x26A0;&#xFE0F; <strong>breaking</strong></p><p>All Uppy plugins have moved into their own npm packages. This means you need to install the plugins you use separately in the future, and you have to update all your Uppy <code>require()</code> calls or <code>import</code> paths.</p><p>The packages are published under the <code>@uppy</code> scope on npm:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="token function">npm</span> <span class="token function">install</span> @uppy/core @uppy/dashboard @uppy/tus</pre></td></tr></table></figure><p>This has some benefits, like:</p><ul><li>No need to know the file path of a plugin&#x2014;use <code>@uppy/dashboard</code> instead of <code>uppy/lib/plugins/Dashboard</code>. This also allows us to move our file structure around internally without breaking everyone.</li><li>Only have the code you actually use in <code>node_modules</code>&#x2014;large plugin dependencies are not installed if you don&#x2019;t use the plugin.</li><li>Separate versioning allows making breaking changes in plugins, without requiring users of other unrelated plugins to upgrade.</li></ul><p>You can still use the <code>uppy</code> package for now to simplify upgrading, although it may be deprecated in the future. It installs all the <code>@uppy/</code> packages and re-exports them:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> <span class="token punctuation">{</span> Core<span class="token punctuation">,</span> Dashboard<span class="token punctuation">,</span> Tus <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>It&#x2019;s very important to set up tree shaking when using Uppy in this way; otherwise you may include dozens of KBs of unused plugins. Using the <code>@uppy/</code> packages instead is strongly recommended, as those do not include unused code in the first place.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> Uppy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@uppy/core'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Dashboard <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@uppy/dashboard'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Tus <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@uppy/tus'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>The CSS required for plugins is included in each package at <code>dist/style.css</code>. Each plugin contains <em>all</em> the CSS it needs, eg. the Dashboard includes Status Bar CSS. If you use both plugins, only include the Dashboard CSS file. Even better is to use a CSS minifier so any duplicate styles are removed for you :) Caveats like this are documented on the plugin pages, and hopefully we can smooth it out over time!</p><h2 id="Typings"><a href="#Typings" class="headerlink" title="Typings"></a>Typings</h2><p><a href="https://github.com/taoqf" target="_blank" rel="noopener">@taoqf</a> contributed TypeScript typings to 0.25&#x2014;0.26 moves those into each package and adds a few missing ones.</p><p>We&#x2019;re not TypeScript experts ourselves, so feedback, bug reports &amp; PRs are very much appreciated <span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2728.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2728.png?v8">&#x2728;</span></p><h2 id="Documentation-Updates"><a href="#Documentation-Updates" class="headerlink" title="Documentation Updates"></a>Documentation Updates</h2><p>The documentation sidebar now lists plugins in several sections. This should make it easier to navigate. Of course, each plugin page now lists the <code>npm install</code> instruction needed to install it, too!</p><h2 id="Renaming-the-host-Option-in-Remote-Providers"><a href="#Renaming-the-host-Option-in-Remote-Providers" class="headerlink" title="Renaming the host Option in Remote Providers"></a>Renaming the <code>host</code> Option in Remote Providers</h2><p>&#x26A0;&#xFE0F; <strong>breaking</strong></p><p>The <code>host</code> name in remote provider plugins was not great&#x2014;for one, it could be a URL to an Uppy Server running in a subdirectory, not a hostname. As of 0.26, <code>serverUrl</code> should be used instead.</p><h2 id="Other-Cool-Changes"><a href="#Other-Cool-Changes" class="headerlink" title="Other Cool Changes"></a>Other Cool Changes</h2><ul><li>providers: Add <code>serverPattern</code> option for third party authentication validation on dynamic Uppy Server hostnames (@ifedapoolarewaju)</li><li>thumbnailgenerator: Polyfill Math.log2 since IE11 doesn&#x2019;t support this method (#892 / @DJWassink)</li><li>dashboard: added browser back button listening (#575 / @zcallan)</li><li>providers: Better provider errors (#895 / @arturi)</li><li>xhr-upload: Add withCredentials option (#874 / @tuoxiansp)</li></ul><p>See <a href="https://github.com/transloadit/uppy/blob/master/CHANGELOG.md#0260" target="_blank" rel="noopener">full changelog (0.26 and 0.25.x patches) for more</a></p><p>See you in the next release!</p><p>The Uppy Team</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Uppy 0.26 replaces the monolithic Uppy package with a separate npm package for every plugin.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;448&quot; src=&quot;/images/blog/0.26/uppy-multiple-packages.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.25: Drag &amp; Drop Links Urls &amp; Images, Improved File Selecting in Providers, Interactive Components In i18n</title>
    <link href="https://uppy.io/blog/2018/06/0.25/"/>
    <id>https://uppy.io/blog/2018/06/0.25/</id>
    <published>2018-06-07T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Uppy 0.25 comes with a couple of new features, like drag-and-dropping URLs and images with the Url plugin, Dashboard modal animation and interactive components in i18n strings, as well as a ton of under the hood fixes and improvements.</p><a id="more"></a><h2 id="Select-In-Providers"><a href="#Select-In-Providers" class="headerlink" title="Select In Providers"></a>Select In Providers</h2><p><img src="/images/blog/0.25/new-select-provider.jpg"></p><p>Selecting files doesn&#x2019;t add files to Uppy immediately anymore. Instead a &#x201C;Select&#x201D; button appears (with a counter), and pressing that adds all the files with checked checkboxes and closes the Instagram or Google Drive overlay. Cancel discards the selection and also closes the overlay.</p><p>This addresses an undesirable case where <code>autoProceed: true</code> would begin uploading files the moment you ticked a checkbox, and you couldn&#x2019;t see what was going on because the provider overlay was still open.</p><h2 id="Drag-amp-Drop-or-Paste-Links-And-Images-with-the-Url-Plugin"><a href="#Drag-amp-Drop-or-Paste-Links-And-Images-with-the-Url-Plugin" class="headerlink" title="Drag &amp; Drop or Paste Links And Images with the Url Plugin"></a>Drag &amp; Drop or Paste Links And Images with the Url Plugin</h2><p>If you use the <a href="/docs/url/">Url plugin</a> with the <a href="/docs/dashboard">Dashboard</a>, you can now drop or paste URLs into the main Dashboard area. They will automatically be imported by the Url plugin:</p><figure class="wide"><video alt="Demo video showing Uppy with Url plugin that accepts drag and dropped urls" autoplay loop muted playsinline><source src="/images/blog/0.25/link-drop-demo.mp4" type="video/mp4">Your browser does not support the video tag, you can <a href="/images/blog/0.25/link-drop-demo.mp4">download the video</a> to watch it.</video></figure><h2 id="i18n-Strings-with-Interactive-Components"><a href="#i18n-Strings-with-Interactive-Components" class="headerlink" title="i18n Strings with Interactive Components"></a>i18n Strings with Interactive Components</h2><p>&#x26A0;&#xFE0F; <strong>breaking</strong></p><p>We&#x2019;ve changed how i18n strings work with interactive components. We now use a placeholder for e.g. buttons, so it works nicely in languages that have different word order than English. Example:</p><figure class="highlight js"><table><tr><td class="code"><pre>dropPasteImport<span class="token punctuation">:</span> <span class="token string">'Drop files here, paste, import from one of the locations above or %{browse}'</span>browse<span class="token punctuation">:</span> <span class="token string">'browse'</span></pre></td></tr></table></figure><p><code>%{browse}</code> will be replaced with a button/link. Previously, these two strings were concatenated in the view layer, so the <code>browse</code> text would always be last.</p><p>Here&#x2019;s a list of strings that were changed in this release, please update those in your locales:</p><ul><li>core: <code>failedToUpload</code> needs to contain <code>%{file}</code>, substituted by the name of the file that failed</li><li>dashboard: <code>dropPaste</code> and <code>dropPasteImport</code> need to contain <code>%{browse}</code>, substituted by the &#x201C;browse&#x201D; text button</li><li>dashboard: <code>editing</code> needs to contain <code>%{file}</code>, substituted by the name of the file being edited</li><li>dashboard: <code>fileSource</code> and <code>importFrom</code> need to contain <code>%{name}</code>, substituted by the name of the provider</li><li>dragdrop: <code>dropHereOr</code> needs to contain <code>%{browse}</code>, substituted by the &#x201C;browse&#x201D; text button</li></ul><p>The full list of available locale strings for each plugin is now documented in the <a href="/docs/">Uppy Docs</a>.</p><h2 id="React-Documentation"><a href="#React-Documentation" class="headerlink" title="React Documentation"></a>React Documentation</h2><p>React docs have been improved: we now have a <a href="/docs/react/">separate page</a> for each Uppy React wrapper component that we offer.</p><p>Other improvements in docs:</p><ul><li>The <code>id</code> option is now listed on each plugin&#x2019;s documentation page.</li><li>The <code>replaceTargetContent</code> option is listed on UI plugin documentation pages.</li><li>The <code>locale</code> option is described on each plugin documentation page, and includes a short description for each string.</li></ul><h2 id="Typescript-Definitions"><a href="#Typescript-Definitions" class="headerlink" title="Typescript Definitions"></a>Typescript Definitions</h2><p><a href="https://github.com/taoqf" target="_blank" rel="noopener">@taoqf</a> went ahead and added a lot of type definitions to Uppy in <a href="https://github.com/transloadit/uppy/pull/834" target="_blank" rel="noopener">#834</a>. So if you are using TypeScript (and even if not, your code editor / linting tool likely supports type definitions), you are in for a treat!</p><h2 id="No-need-to-run"><a href="#No-need-to-run" class="headerlink" title="No need to .run()"></a>No need to <code>.run()</code></h2><p>&#x26A0;&#xFE0F;<strong>breaking</strong></p><p>We removed the need to type <code>uppy.run()</code> in <a href="https://github.com/transloadit/uppy/pull/793" target="_blank" rel="noopener">#793</a>. You now only have to call <code>.use()</code> for the plugins that you need (as usual), and everything is then run automatically. It comes with a few tradeoffs but we were getting a big amount of support tickets where people forgot to conclude with <code>.run()</code>, and we saw a chance to reduce boilerplate, so we decided to go ahead and pave the cowpath.</p><h2 id="Authorisation-tokens-in-Local-Storage"><a href="#Authorisation-tokens-in-Local-Storage" class="headerlink" title="Authorisation tokens in Local Storage"></a>Authorisation tokens in Local Storage</h2><p>&#x26A0;&#xFE0F;<strong>breaking</strong></p><p>Authorisation tokens from Uppy Server are now stored in local storage as opposed to cookies. Two primary reasons for this decision are:</p><ol><li>It avoids CSRF issues which are present when using cookies.</li><li>It allows for less stringent <a href="https://github.com/transloadit/uppy/issues/803#issuecomment-386257515" target="_blank" rel="noopener">CORS policies enforced by browsers</a>, since we are no longer sending cookie credentials via Ajax requests.</li></ol><p>This is a breaking change because it requires that the Uppy Server version should also be updated to <strong>0.13.x</strong> otherwise there could be unexpected behaviour.</p><p>What&#x2019;s more about the Authorisation tokens is that they are now encrypted on the server before being sent down to the client. Subsequent requests from the client will then send the token to the server via headers (not via cookies anymore).</p><h2 id="Other-Cool-Changes"><a href="#Other-Cool-Changes" class="headerlink" title="Other Cool Changes"></a>Other Cool Changes</h2><ul><li>Fix: Debounce render calls again, fixes #669 (#796)</li><li>Fix: XHRUpload canceled uploads progress events (#864)</li><li>Improvement: Dashboard open/close animation (#852)</li><li>Improvement: You can now hide action buttons in Dashboard and StatusBar (#821)</li><li>Improvement: Pass <code>allowedFileTypes</code> and <code>maxNumberOfFiles</code> to <code>input[type=file]</code> to add restrictions to the system file picking dialog too (#814)</li><li>Improvement: merge meta data when add file (#810)</li><li>Fix: More robust failure handling for Transloadit, closes #708 (#805)</li><li>Feature: display username/email in provider view</li><li>Feature: show message for empty provider files</li><li>Server: Allow custom headers to be set for remote multipart uploads</li><li>Server: Add type to metadata as <code>filetype</code></li></ul><p>&#x26A0;&#xFE0F;<strong>heads up</strong></p><p>In the next release we are planning a <a href="https://github.com/transloadit/uppy/pull/906" target="_blank" rel="noopener">Lerna conversion</a>, meaning that each Uppy plugin / module will get its own NPM package. Pretty excited about that one! (but also please refrain from sending us big PRs in the meantime :)</p><p>See you in the next one!</p><p>The Uppy Team</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Uppy 0.25 comes with a couple of new features, like drag-and-dropping URLs and images with the Url plugin, Dashboard modal animation and interactive components in i18n strings, as well as a ton of under the hood fixes and improvements.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.24: Refreshed Dashboard, StatusBar and Provider UI, revamped XHR Response Handling</title>
    <link href="https://uppy.io/blog/2018/04/0.24/"/>
    <id>https://uppy.io/blog/2018/04/0.24/</id>
    <published>2018-04-17T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Uppy 0.24.2 brings a refreshed UI in the Dashboard and StatusBar plugins, a synchronous <code>addFile()</code> method, a cancel button, style protections, documentation on writing your own Uppy plugin, revamped XHR response handling and tons of bugfixes.</p><a id="more"></a><h2 id="Refreshed-Dashboard-and-Providers"><a href="#Refreshed-Dashboard-and-Providers" class="headerlink" title="Refreshed Dashboard and Providers"></a>Refreshed Dashboard and Providers</h2><p>As always, we are trying to simplify and improve the UI of Uppy plugins. In this release, Dashboard&#x2019;s design has been refreshed, check this out:</p><p><img class="border" src="/images/blog/0.24/dashboard-main.jpg"></p><p><img class="border" src="/images/blog/0.24/uppy-screenshot.jpg"></p><p>Meta editing screen:</p><p><img class="border" src="/images/blog/0.24/dashboard-meta-edit.jpg"></p><p>Camera screen:</p><p><img class="border" src="/images/blog/0.24/import-from-camera.jpg"></p><p>Import from URL (Link):</p><p><img class="border" src="/images/blog/0.24/import-from-url.jpg"></p><p>And more, check out the <a href="https://uppy.io/examples/dashboard/">Dashboard example page</a>.</p><h2 id="A-Cleaner-StatusBar"><a href="#A-Cleaner-StatusBar" class="headerlink" title="A Cleaner StatusBar"></a>A Cleaner StatusBar</h2><p>The StatusBar plugin used to show a lot of progress details. This has been simplified so that by default it will only show a percentage:</p><p><img src="/images/blog/0.24/statusbar-2.jpg"></p><p>But there&#x2019;s an option <code>showProgressDetails: true</code> for both the StatusBar and Dashboard (which passes it to StatusBar included in the Dashboard) to bring back this detailed information, spread over two lines:</p><p><img src="/images/blog/0.24/statusbar-1.jpg"></p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>StatusBar<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token punctuation">,</span> showProgressDetails<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// or</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Dashboard<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token punctuation">,</span> showProgressDetails<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>We&#x2019;ve also added a handy &#x201C;cancel&#x201D; button, which will cancel everything in progress regardless of the type of the upload (wether uppy-server or local powered, and wether tus-resumable or old school XHR/form uploads).</p><h2 id="XHR-Response-Handling"><a href="#XHR-Response-Handling" class="headerlink" title="XHR Response Handling"></a>XHR Response Handling</h2><p>When the upload completes (regardless of whether it succeeded), a <code>response</code> key gets added to the file. <code>file.response</code> contains a <code>status</code> and <code>data</code> properties. <code>data</code> is the result of the <code>getResponseData()</code> option. The <code>getResponseData()</code> function&#x2019;s signature is now:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token function">getResponseData</span> <span class="token punctuation">(</span><span class="token parameter">responseText<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></pre></td></tr></table></figure><p>This is what the default JSON parsing implementation looks like in the <code>XHRUpload</code> plugin, but you can override it with your own:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token function">getResponseData</span> <span class="token punctuation">(</span><span class="token parameter">responseText<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> parsedResponse <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    parsedResponse <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> parsedResponse<span class="token punctuation">}</span></pre></td></tr></table></figure><p>The <code>responseText</code> is the XHR endpoint response as a string. For uploads from the user&#x2019;s device, <code>response</code> is the <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest</a> object.</p><p>When uploading files from remote providers such as Dropbox or Instagram, Uppy Server sends upload response data to the client. This is made available in the <code>getResponseData()</code> option as well. The <code>response</code> object from Uppy Server contains some properties named after their <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest</a> counterparts:</p><ul><li><code>response.responseText</code> - the XHR endpoint response as a string;</li><li><code>response.status</code> - the HTTP status code;</li><li><code>response.statusText</code> - the HTTP status text;</li><li><code>response.headers</code> - an object mapping lowercase header names to their values.</li></ul><h2 id="Powered-by-Uppy"><a href="#Powered-by-Uppy" class="headerlink" title="Powered by Uppy"></a>Powered by Uppy</h2><p>Uppy is provided free for the world forever. In return, we ask that you consider keeping a tiny tasteful Uppy logo at the bottom of the Dashboard, so that more people can discover and enjoy Uppy. This <em>really helps</em> to grow our community which will result in more issues reported, more contributors, more features requested, more PRs merged, and a better Uppy for you to use tomorrow, for free, forever.</p><p>If you don&#x2019;t want to do this indefinitely, consider doing this initially, just to help us reach critical mass and get our <em>perpetuum mobile</em> going.</p><p>But, Uppy is also free as in freedom. And so if you can&#x2019;t help our cause, set <code>proudlyDisplayPoweredByUppy</code> to <code>false</code> to hide te Uppy logo.</p><p><img src="/images/blog/0.24/powered-by-1.jpg"></p><h2 id="Server-News"><a href="#Server-News" class="headerlink" title="Server News"></a>Server News</h2><p>We occasionally get questions about the required servers for Uppy. Uppy does not require special servers. You can use Uppy for free in the browser and let it upload to your existing Apache/Nginx server. Sprinkle a few lines of HTML/JS and that&#x2019;s it. </p><p><strong>If you want integration with Instagram</strong> Dropbox and friends, you&#x2019;ll need to run an &#x2018;Uppy Server&#x2019; in the datacenter to help with OAuth secrecy and fetching large files and uploading those, bypassing the client. No fun to have several gigabytes pass through your mobile tubes - best let the datacenters sort this out among themselves. That&#x2019;s what Uppy Server is for.</p><p><strong>If you want resumable uploads</strong>, you&#x2019;ll need a <a href="https://tus.io/" target="_blank" rel="noopener">https://tus.io/</a> speaking server. </p><p>You can run these optional servers yourself, or use the hosted variants provided by our company <a href="https://transloadit.com/" target="_blank" rel="noopener">Transloadit</a> for &#x1F4B8;. Transloadit also adds a wide range of encoding/processing features.</p><p>Now that that&#x2019;s sorted out, let&#x2019;s see what we improved on the Uppy Server side! We tackled a number of security issues:</p><ul><li>Fixed security vulnerability in transient dependency <a href="https://github.com/transloadit/uppy-server/issues/70" target="_blank" rel="noopener">#70</a></li><li>Auto-generate tmp download file name to avoid Path traversal</li><li>Namespace redis key storage/lookup to avoid collisions</li><li>Validate callback redirect url after completing OAuth</li><li>Reduce the permission level required by Google Drive</li></ul><p>Other non-security improvements are:</p><ul><li>Auto-generate Server secret if none is provided on startup</li><li>We implemented a more standard logger for Uppy Server</li><li>Added an example project to run Uppy Server on Serverless, <a href="https://github.com/transloadit/uppy-server/tree/master/examples/serverless" target="_blank" rel="noopener">see</a>.</li></ul><h2 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h2><ul><li>Uppy Server docs now point to a detailed write-up on how to run Uppy Server on Kubernetes (#706 / @kiloreux)</li><li>An Uppy Server custom provider example has been added, so now it&#x2019;s easier create your own custom providers.</li><li>Added more useful events, i18n strings, fixed typos, and other polish.</li></ul><h2 id="Other-Fixes-amp-Improvements"><a href="#Other-Fixes-amp-Improvements" class="headerlink" title="Other Fixes &amp; Improvements"></a>Other Fixes &amp; Improvements</h2><ul><li>&#x26A0;&#xFE0F; <strong>breaking</strong> <code>addFile()</code>, <code>onBeforeFileAdded()</code> and <code>onBeforeUpload()</code> are now synchronous and have to return nothing or file objects to proceed, or false to abort; please check out the update docs for details: <a href="https://uppy.io/docs/uppy/#onBeforeFileAdded">onBeforeFileAdded()</a> and <a href="https://uppy.io/docs/uppy/#onBeforeUpload">onBeforeUpload()</a>.</li><li>&#x26A0;&#xFE0F; <strong>breaking</strong> Most events now emit the whole <code>file</code> object instead of a <code>fileId</code>. So you can access <code>file.name</code> right away, for example, so you no longer have to fish for the file using its id.</li><li>&#x26A0;&#xFE0F; <strong>breaking</strong> We&#x2019;ve added <code>postcss-safe-important</code> to our style build step, so now 90% of rules got <code>!important</code> declaration added to them. This is done to prevent page styles (especially global ones like from Bootstrap) from leaking into the Uppy widget. There are other solutions we are looking into, like iFrames and WebComponents, this is an experiment. Keep in mind that to override Uppy styles, you now have to also use <code>!important</code>.</li><li>dashboard: &#x26A0;&#xFE0F; <strong>breaking</strong> <code>maxWidth</code>, <code>maxHeight</code> options have been converted to <code>width</code> and <code>height</code>, because this makes more sense, <code>maxWidth</code> and <code>maxHeight</code> are actually <code>100%</code>.</li><li>There is now an option <code>showLinkToFileUploadResult: false</code> to disable linking to the upload result in Dashboard UI.</li><li>We are now using the image time and date as a file name in Instagram, instead of a generic file id.</li><li>The URL plugin now checks for HTTP(S) protocol, and adds HTTP by default if no protocol is present.</li><li>It&#x2019;s now possible to override <code>&lt;DashboardModal /&gt;</code> React component&#x2019;s target prop.</li><li>Provider views now have <code>showFilter</code> and <code>showBreadcrumbs</code> options, those are <code>false</code> for the Instagram plugin, for example.</li><li>Uppy Server to Client communication has been refactored into <code>Provider</code> and <code>Request</code> modules. <code>Request</code> can be used when a simple request needs to be made to Uppy Server, like in the URL plugin. <code>Provider</code> is used for more complex implementations shared between Google Drive and Instagram, for example.</li></ul><p>Finally, we&#x2019;ve added a Transloadit example to the website, <a href="https://uppy.io/examples/transloadit/">check it out</a>.</p><p>Have fun,</p><p>The Uppy Team</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Uppy 0.24.2 brings a refreshed UI in the Dashboard and StatusBar plugins, a synchronous &lt;code&gt;addFile()&lt;/code&gt; method, a cancel button, style protections, documentation on writing your own Uppy plugin, revamped XHR response handling and tons of bugfixes.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.23: Import from Url, refactored thumbnail generation, XHR bundle</title>
    <link href="https://uppy.io/blog/2018/02/0.23/"/>
    <id>https://uppy.io/blog/2018/02/0.23/</id>
    <published>2018-02-12T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Hi all! We are back from holidays with a shiny new <code>0.23.0</code> release for you! It&#x2019;s packed with a new <code>Url</code> plugin (imports files from urls), refactored <code>ThumbnailGenerator</code>, <code>Webcam</code> improvements and more.</p><h2 id="Import-from-Url"><a href="#Import-from-Url" class="headerlink" title="Import from Url"></a>Import from Url</h2><p>Meet our new &#x201C;Provider&#x201D; plugin, <code>Url</code>. It&#x2019;s simple, yet powerful: paste a link to any file on the web, and Uppy with Uppy Server will upload it wherever you need.</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Url<span class="token punctuation">,</span> <span class="token punctuation">{</span> target<span class="token punctuation">:</span> Dashboard<span class="token punctuation">,</span> host<span class="token punctuation">:</span> <span class="token constant">YOUR_UPPY_SERVER_URL</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><figure class="wide"><video alt="Demo video showing Uppy with Url plugin that imports files from urls" controls autoplay><source src="/images/blog/0.23/uppy-url-demo.mp4" type="video/mp4">Your browser does not support the video tag, you can <a href="/images/blog/0.23/uppy-url-demo.mp4">download the video</a> to watch it.</video></figure><a id="more"></a><h2 id="ThumbnailGenerator"><a href="#ThumbnailGenerator" class="headerlink" title="ThumbnailGenerator"></a>ThumbnailGenerator</h2><p>Thumbnail generation has been refactored to a separate <code>ThumbnailGenerator</code> plugin, thanks to the PR from <a href="https://github.com/richardwillars" target="_blank" rel="noopener">@richardwillars</a>. So Uppy Core is now more lightweight, if you don&#x2019;t need previews.</p><p><code>ThumbnailGenerator</code> is still bundled with our most feature complete <code>Dashboard</code> plugin though, so you don&#x2019;t have to change anything if you were using that.</p><p>We&#x2019;ve also fixed previews in Safari and tweaked the code slightly after reading the excellent <a href="https://blog.uploadcare.com/image-resize-in-browsers-is-broken-e38eed08df01" target="_blank" rel="noopener">Image resize in browsers is broken</a> post by Uploadcare &#x1F44C;.</p><h2 id="Processing-results"><a href="#Processing-results" class="headerlink" title="Processing results"></a>Processing results</h2><p>Processing results from encoding plugins like <a href="https://uppy.io/docs/transloadit/"><code>Transloadit</code></a>, are now added to <code>complete</code> event:</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment">// result: {</span>  <span class="token comment">//   failed: [...],</span>  <span class="token comment">//   successful: [...],</span>  <span class="token comment">//   transloadit: [...],</span>  <span class="token comment">//   uploadID: "cjdnzj2zy0000c___iewu9m5y"</span>  <span class="token comment">//}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>And to <code>uppy.upload()</code> promise result too:</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>You can still use events like <a href="https://uppy.io/docs/transloadit/#transloadit-result"><code>transloadit:result</code></a>, its just easier when things are in the same place. Plugins can use the new <code>uppy.addResultData()</code> API to add data to the <code>result</code>, like so:</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">addResultData</span><span class="token punctuation">(</span>uploadID<span class="token punctuation">,</span> <span class="token punctuation">{</span> transloadit<span class="token punctuation">:</span> assemblies <span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="Webcam"><a href="#Webcam" class="headerlink" title="Webcam"></a>Webcam</h2><p>The Webcam plugin now mirrors image previews by default, so when you are making a selfie and wave with your right hand, you see that right hand in the Webcam preview, just like in the mirror. This option can be disabled via <code>uppy.use(Webcam, { mirror: false }</code>. Note that the resulting image will not be mirrored, so your hand will actually be waving on the left. This mimics the behaviour of smarphone selfie cameras.</p><p>We&#x2019;ve also added an option to select which camera will be used to capture pictures or video: <a href="https://uppy.io/docs/webcam/#facingMode-39-user-39">facingMode</a>, set to <code>user</code> (front camera) by default.</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><ul><li>You can now specify a config path when starting the standalone Uppy Server like so <code>uppy-server --config /path/to/uppyconf.json</code>. The config file is expected to be a JSON file with the same schema as the <a href="https://uppy.io/docs/server/#Options">Uppy Server options</a>.</li><li>A periodic cleanup job has been added to Uppy Server, to delete stale upload files from the specified <code>filePath</code>. Even though we&#x2019;d rarely expect uploaded files to go undeleted immediately, there could be cases where an error occurs during an upload, and so Uppy Server leaves the file undeleted to give room for upload retries. With the cleanup job in place, we can ensure that this file would eventually be deleted after the file upload is done.</li><li>Responses from Multipart uploads are now relayed to Uppy Client as they are received from the target server. With this in place, you can now handle responses from local and remote XHRUpload in nearly the same way.</li></ul><h2 id="Other-Improvements-and-Additions"><a href="#Other-Improvements-and-Additions" class="headerlink" title="Other Improvements and Additions"></a>Other Improvements and Additions</h2><ul><li>Added new option to hide ProgressBar and StatusBar after upload finish (#485 / @wilkoklak)</li><li>Chaining API has been improved, you can now use <code>.on</code> and <code>.off</code> anywhere: <code>uppy.use(Dashboard).use(Tus).on(&apos;complete&apos;, handleComplete).run()</code></li><li>The Transloadit plugin now has a new <code>transloadit:assembly-executing</code> event and passes Assembly results to the <code>complete</code> callback (#547, #527 / @goto-bus-stop)</li><li>We&#x2019;ve added a <code>bundle</code> option to the <code>XHRUpload</code> plugin to send multiple files in one request (#442 / @goto-bus-stop)</li><li>Uppy releases are now hosted on Edgly CDN by Transloadit</li><li>A Third-party extension for integrating the Ngrx Angular state management library with Uppy has been released, <a href="https://github.com/rimlin/uppy-store-ngrx/" target="_blank" rel="noopener">uppy-store-ngrx</a> by @rimlin</li></ul><h2 id="Other-Fixes"><a href="#Other-Fixes" class="headerlink" title="Other Fixes"></a>Other Fixes</h2><ul><li>Fixed blank preview thumbnails for images in Safari; use slightly different step scaling (#458, #584 / @arturi)</li><li>We now log in console and show an Informer message, not error in console, when file cannot be added due to restrictions (#604, #492 / @goto-bus-stop).</li><li>Unused files have been removed from published package, saving many many precious megabytes :) (#586 / @goto-bus-stop)</li><li>Use empty input value so same file can be selected multiple times (@arturi / #534)</li><li>Fix modal and page scroll (#564 / @arturi)</li><li>Refactor provider views (#554 / @arturi)</li><li>Lots of documentation fixes, thanks to all our contributors!</li></ul><h2 id="Press"><a href="#Press" class="headerlink" title="Press"></a>Press</h2><p>Uppy has made some appearances on the internet recently.</p><p>1. <strong><a href="https://twin.github.io/better-file-uploads-with-shrine-direct-uploads" target="_blank" rel="noopener">Better File Uploads with Shrine: Direct Uploads</a></strong>:</p><p>On how to set up Uppy with <a href="http://shrinerb.com/" target="_blank" rel="noopener">Shrine</a>, a file attachment toolkit for Ruby applications. It starts off with an example of a plain <code>&lt;form&gt;</code> upload and builds up to a more advanced experience:</p><blockquote><ul><li>When the user submits the form with selected files, there is no indicator telling them when the upload will finish.</li><li>When the user is uploading multiple files at once and the request happens to get aborted, it&#x2019;s not possible to keep the files that were uploaded so far, because all files are sent in a single request. In other words, multiple uploads are all-or-nothing.</li><li>Files are validated only after they have been uploaded, which means the user needs to wait until the upload finishes before they can know whether their file was even valid.</li></ul><p>We can improve that by asynchronously starting to upload files on the client side as soon as they&#x2019;re selected. This also gives users the ability to continue filling in other fields while files are being uploaded, because the UI isn&#x2019;t blocked during the upload.</p><p>There are many popular JavaScript file upload libraries out there &#x2013; jQuery-File-Upload, Dropzone.js, FineUploader etc. &#x2013; but the one you should use with Shrine is definitely Uppy &#x1F436;. Uppy is a modular library that knows how to upload files to a custom endpoint on your app, to Amazon S3, or even to a resumable endpoint, providing progress bars, drag &amp; drop functionality, image previews, file validations etc, all while making as few assumptions as possible.</p></blockquote><p>2. <strong>Featured <a href="https://twitter.com/JavaScriptDaily/status/950348390268919809" target="_blank" rel="noopener">in Javascript Daily</a></strong>:</p><blockquote><p>Uppy: A Powerful, Modular JavaScript File Uploader<br><cite>&#x2014; JavaScript Daily</cite></p></blockquote><p>3. <strong><a href="https://twitter.com/uppy_io/status/946485101541683201" target="_blank" rel="noopener">#1 Trending on GitHub</a> accross all languages</strong>:</p><blockquote><p>Today our open source efforts are outpacing those of MSFT GOOG FB combined :D<br><cite>&#x2014; kvz, transloadit</cite></p></blockquote><p>4. <strong><a href="https://www.producthunt.com/posts/uppy-io" target="_blank" rel="noopener">#2 Product of the Week</a> on ProductHunt</strong>:</p><blockquote><p>You literally solved my biggest problem, thank you for developing such a great project.<br><cite>&#x2014; Chetan Menaria</cite></p></blockquote><blockquote><p>Writing file upload functionality is always a pain in the arse. I&#x2019;ll be checking this out today and integrating into SongBox if it&#x2019;s good.<br><cite>&#x2014; Mick</cite></p></blockquote><p>5. <strong><a href="https://stackshare.io/posts/top-developer-tools-2017" target="_blank" rel="noopener">#2 New Tool of The Year</a> on Stackshare</strong>:</p><blockquote><p>Uppy closed out the year as the #1 trending GitHub JavaScript project, so we think it&#x2019;s only getting started.</p></blockquote><h2 id="Full-Changelog"><a href="#Full-Changelog" class="headerlink" title="Full Changelog"></a>Full Changelog</h2><p>Here is the full list of changes for version <code>0.23.0</code> (and patches <code>0.22.1</code>&#x2014;<code>0.22.5</code>):</p><ul><li>core: Allow plugins to add data to result object. Return <code>processing</code> results among with <code>upload</code> results in <code>complete</code> event and <code>upload()</code> promise (#527 / @goto-bus-stop)</li><li>core: Move limiting to different point, to fix StatusBar and other UI issues #468 (#524, #526 / @goto-bus-stop)</li><li>core: Add uploadID to complete event (#569 / @richardwillars)</li><li>core: Allow chanining after .on() and .off() to improve ergonomics (#597 / @arturi)</li><li>core: Allow user to override sass variables (#555 / @chao)</li><li>core: Move preview generation to separate plugin, add queuing (#431 / @richardwillars)</li><li>core: Third-party extension, uppy-store-ngrx <a href="https://github.com/rimlin/uppy-store-ngrx/" target="_blank" rel="noopener">https://github.com/rimlin/uppy-store-ngrx/</a> (#532 / @rimlin)</li><li>core: Warn, not error, when file cannot be added due to restrictions? (#604, #492 / @goto-bus-stop)</li><li>dashboard: Add more i18n strings (#565 / @arturi)</li><li>dashboard: Fix modal and page scroll (#564 / @arturi)</li><li>dashboard: Refactor provider views (#554 / @arturi)</li><li>dashboard: Restore focus after modal has been closed (#536 / @arturi)</li><li>dashboard: Use empty input value so same file can be selected multiple times (@arturi / #534)</li><li>dashboard: Use more accessible tip lib microtip (#536 / @arturi)</li><li>docs: Add PHP snippets to XHRUpload docs (#567 / @goto-bus-stop)</li><li>meta: Added instruction to fork the repo first (#512 / muhammadInam)</li><li>meta: Automatically host releases on edgly and use that as our main CDN (#558 / @kvz)</li><li>meta: Dependency version updates (#523 / @goto-bus-stop)</li><li>meta: Remove unused files from published package (#586 / @goto-bus-stop)</li><li>s3: Respect <code>limit</code> option for upload parameter requests too; fix isXml() check when no content-type is available (#545, #544, #528 / @goto-bus-stop)</li><li>statusbar: Fix status text still showing when statusbar is hidden (#525 / @goto-bus-stop)</li><li>test: Alter jest testPathPattern to current dir, add chai (#583 / @arturi)</li><li>thumbnail: Add thumbnail generation plugin (#461 / @richardwillars)</li><li>thumbnail: Fix blank preview thumbnails for images in Safari; use slightly different stap scaling (#458, #584 / @arturi)</li><li>transloadit: Add <code>transloadit:assembly-executing</code> event (#547 / @goto-bus-stop)</li><li>transloadit: Add assembly results to to the <code>complete</code> callback (#527 / @goto-bus-stop)</li><li>transloadit: Easily pass form fields (#593 / @goto-bus-stop)</li><li>tus: <code>resume: false</code> &#x2014; don&#x2019;t store url (@arturi / #507)</li><li>uppy-server: Detect file upload size from the server (@ifedapoolarewaju)</li><li>uppy-server: Fix circular json stringify error (@ifedapoolarewaju)</li><li>uppy-server: Load standalone server options via config path (@ifedapoolarewaju)</li><li>uppy-server: Pass response from uppy-server upload&#x2019;s endpoint (#591 / @ifedapoolarewaju)</li><li>uppy-server: Schedule job to delete stale upload files (@ifedapoolarewaju)</li><li>uppy-server: Security audit, ask @acconut</li><li>uppy-server: Support localhost urls as endpoints (@ifedapoolarewaju)</li><li>url: New plugin that imports files from urls (#588 / @arturi, @ifedapoolarewaju)</li><li>webcam: Font styling for Webcam option (#509 / @muhammadInam)</li><li>webcam: Mirror image preview, add option to select which camera is used to capture, try filling the whole Dashboard with webcam preview image, remove URL.createObjectURL() (#574 / @arturi, @nqst)</li><li>website: Add Transloadit example to website (#603 / @arturi)</li><li>website: Doc fixes (#563 / @arturi)</li><li>website: Improve the Contributing guide (#578 / @arturi)</li><li>xhrupload: Add bundle option to send multiple files in one request (#442 / @goto-bus-stop)</li><li>xhrupload: Prevent files from being uploaded multiple times in separate uploads (#552 / @richardwillars)</li><li>xhrupload: Refactor response and error handling (#591 / @goto-bus-stop, @arturi, @ifedapoolarewaju)</li><li>core: Fix remote uploads (#474 / @arturi)</li><li>statusbar, progressbar: Add option to hide progress bar after upload finish (#485 / @wilkoklak)</li><li>s3: Allow passing on XHRUpload options, such as &#x201C;limit&#x201D; to AwsS3 Plugin (#471 / @ogtfaber)</li><li>XHRUpload: Fix progress with <code>limit</code>ed XHRUploads (#505 / @goto-bus-stop)</li><li>core: fix error when <code>file.type === null</code>, shouldn&#x2019;t pass that to match (@arturi)</li><li>dashboard: input hidden=&#x201D;true&#x201D; should not be focusable too (@arturi)</li><li>webcam: Font styling for Webcam option (#509 / @muhammadInam)</li><li>docs: fix reference to incorrect width/height options (#475 / @xhocquet)</li><li>docs: Documentation fixes and improvements (#463 / @janko-m)</li><li>docs: Fixed several typos in docs/server and docs/uppy (#484 / @martiuslim)</li></ul><p>The Uppy Team</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi all! We are back from holidays with a shiny new &lt;code&gt;0.23.0&lt;/code&gt; release for you! It’s packed with a new &lt;code&gt;Url&lt;/code&gt; plugin (imports files from urls), refactored &lt;code&gt;ThumbnailGenerator&lt;/code&gt;, &lt;code&gt;Webcam&lt;/code&gt; improvements and more.&lt;/p&gt;
&lt;h2 id=&quot;Import-from-Url&quot;&gt;&lt;a href=&quot;#Import-from-Url&quot; class=&quot;headerlink&quot; title=&quot;Import from Url&quot;&gt;&lt;/a&gt;Import from Url&lt;/h2&gt;&lt;p&gt;Meet our new “Provider” plugin, &lt;code&gt;Url&lt;/code&gt;. It’s simple, yet powerful: paste a link to any file on the web, and Uppy with Uppy Server will upload it wherever you need.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;uppy.use(Url, { target: Dashboard, host: YOUR_UPPY_SERVER_URL })
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&quot;wide&quot;&gt;&lt;video alt=&quot;Demo video showing Uppy with Url plugin that imports files from urls&quot; controls autoplay&gt;&lt;source src=&quot;/images/blog/0.23/uppy-url-demo.mp4&quot; type=&quot;video/mp4&quot;&gt;Your browser does not support the video tag, you can &lt;a href=&quot;/images/blog/0.23/uppy-url-demo.mp4&quot;&gt;download the video&lt;/a&gt; to watch it.&lt;/video&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.22: Preact, Form, Improved Dashboard, Custom Stores</title>
    <link href="https://uppy.io/blog/2017/12/0.22/"/>
    <id>https://uppy.io/blog/2017/12/0.22/</id>
    <published>2017-12-23T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Uppy is <a href="https://www.producthunt.com/posts/uppy-io" target="_blank" rel="noopener">featured on Product Hunt</a>! To our fellow hunters: welcome! Quick intro: Uppy is the next open source file uploader for web browsers. We&#x2019;re very close to launching 1.0 and would love to get your feedback in, leave your thoughts on Product Hunt or start a discussion below.</strong></p><p>Hi all! It&#x2019;s New Year and Christmas time, and this year Santa is brining you Uppy <code>0.22</code> &#x1F381; This release packs a lot of neat stuff, but it also breaks things in quite a few places, so please read on.</p><p>And, if you are celebrating, happy holidays from the Uppy Team! &#x1F384;</p><a id="more"></a><h2 id="Preact-and-JSX"><a href="#Preact-and-JSX" class="headerlink" title="Preact and JSX"></a>Preact and JSX</h2><p>We&#x2019;ve been happy using <code>yo-yo</code> and <code>hyperx</code> template strings in our views for quite a while, but decided to try something more stable. Preact has most of the great ideas of React, plus smaller file size as well as a few good ideas of its own.</p><p>All views have been refactored to utilize JSX. We actually liked hyperx a lot, but JSX has better tooling and syntax highlighting support. It also seems to be the standard in the React community.</p><p>See <a href="https://github.com/transloadit/uppy/pull/451" target="_blank" rel="noopener">#451 PR</a> for details on why we switched and discussion around the process.</p><h2 id="Core-and-plugins-refactor"><a href="#Core-and-plugins-refactor" class="headerlink" title="Core and plugins refactor"></a>Core and plugins refactor</h2><ul><li><strong>&#x26A0;&#xFE0F; Breaking</strong> We&#x2019;ve renamed the <code>core</code> object to <code>uppy</code> in plugins. So instead of <code>this.core.state</code> we now use <code>this.uppy.state</code>.</li><li><strong>&#x26A0;&#xFE0F; Breaking</strong> Events have been renamed to remove the <code>core:</code> prefix. So <code>core:success</code> becomes just <code>success</code>, and this also results in now having <code>error</code>, <code>upload-started</code> and so on. Prefixed event names are used for plugin-specific event sometimes, like <code>dashboard:file-card</code>.</li><li><strong>&#x26A0;&#xFE0F; Breaking</strong> CSS class names have been altered to use the <code>uppy-</code> namespace, so <code>.UppyDashboard-files</code> becomes <code>.uppy-Dashboard-files</code> and so on.</li><li><strong>&#x26A0;&#xFE0F; Breaking</strong> <code>getMetaFromForm</code> was removed in favor of the new <code>Form</code> plugin (see below).</li><li><strong>&#x26A0;&#xFE0F; Breaking</strong> <code>MetaData</code> plugin was removed in favor of the <code>metaFields</code> option in Dashboard, <a href="https://uppy.io/docs/dashboard/#metaFields">see docs</a> for more details.</li><li>Plugins now use <code>this.el</code> to refer to their UI element instead of <code>this.target</code>.</li><li><code>setPluginState</code> and <code>getPluginState</code> are now used in Providers.</li></ul><h2 id="Refreshed-Dashboard-UI"><a href="#Refreshed-Dashboard-UI" class="headerlink" title="Refreshed Dashboard UI"></a>Refreshed Dashboard UI</h2><p><img src="/images/blog/0.22/uppy-dashboard-updated.jpg" alt="Uppy Dashboard UI with 3 files selected"></p><ul><li>File cards are simpler, we&#x2019;ve removed the excess white backgrounds, improved the remove icon, reduced paddings, added slight shadows.</li><li>Cicular upload button in the Dashboard has been moved to the StatusBar. It&#x2019;s also not circular anymore, and there&#x2019;s no cloud icon. Plain and simple.</li><li>Redesigned &#x201C;retry&#x201D; and &#x201C;add +1 file&#x201D; buttons.</li><li>Added <code>metaFields</code> option: an array of settings for UI field objects, which previousely lived in a separate <code>MetaData</code> plugin: <code>{ id: &apos;caption&apos;, name: &apos;Caption&apos;, placeholder: &apos;describe what the image is about&apos; }</code>, <a href="https://uppy.io/docs/dashboard/#metaFields">see docs</a> for more details.</li></ul><p>See <a href="https://github.com/transloadit/uppy/pull/451" target="_blank" rel="noopener">#434 PR</a> for more screenshots and details.</p><h2 id="Select-multiple-files-in-providers"><a href="#Select-multiple-files-in-providers" class="headerlink" title="Select multiple files in providers"></a>Select multiple files in providers</h2><p>Thanks to <a href="https://github.com/sadovnychyi" target="_blank" rel="noopener">@sadovnychyi</a>, you can now select multiple files from remote providers like Google Drive and Instagram. You can also select folders, and even range of files by holding <code>shift</code> key when clicking on first and last item in range.</p><p><img src="/images/blog/0.22/uppy-dashboard-provider-select.jpg" alt="Uppy Dashboard UI with 3 files selected"></p><p><a href="https://uppy.io/examples/dashboard/">Check it out &#x2192;</a></p><h2 id="Stores"><a href="#Stores" class="headerlink" title="Stores"></a>Stores</h2><p>As you know, internally Uppy uses its own simple state management system with <code>getState</code> and <code>setState</code> methods. In previous releases we&#x2019;ve added support for Redux via a plugin called <code>Redux</code>, which mirrors all Uppy state to your Redux application&#x2019;s state, and a plugin called <code>ReduxDevTools</code> that connects to Redux DevTools and enables all the cool time traveling stuff.</p><p>We are excited to tell you that this release makes state management even more flexible by bringing support for external stores! Here&#x2019;s a quote from the docs:</p><blockquote><p>By default, Uppy stores its internal state in an object.</p><p>If your app uses a state management library such as Redux, it can be useful to have Uppy store its state there instead&#x2014;that way, you could write custom uploader UI components in the same way as the other components in the application.</p></blockquote><p>Here&#x2019;s how that works:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'redux'</span><span class="token punctuation">)</span><span class="token keyword">const</span> ReduxStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy/lib/store/ReduxStore'</span><span class="token punctuation">)</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token operator">...</span>reducers<span class="token punctuation">,</span>  uppy<span class="token punctuation">:</span> ReduxStore<span class="token punctuation">.</span>reducer<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token keyword">const</span> uppy <span class="token operator">=</span> <span class="token function">Uppy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  store<span class="token punctuation">:</span> <span class="token function">ReduxStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    store<span class="token punctuation">:</span> store <span class="token comment">// That's a lot of stores!</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">...</span></pre></td></tr></table></figure><p>Now Uppy will use your app&#x2019;s Redux store instead of its own, so you have a &#x201C;single source of truth&#x201D; &#x1F52E;</p><p>Read <a href="https://uppy.io/docs/stores/">more on stores</a> in docs.</p><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><p><code>Form</code> is a new plugin that can be used in conjunction with any other. Here&#x2019;s what it does: </p><ol><li>Acquires metadata from a <code>&lt;form&gt;</code> element of your choosing before the upload starts in Uppy.</li><li>Injects result array of succesful and failed files back into the form.</li></ol><p><strong>&#x26A0;&#xFE0F; Breaking</strong> With this plugin we&#x2019;ve deprecated <code>getMetaFromForm</code> option that used to be in all acquire plugins like Dashboard and DragDrop. Now you can just use <code>Form</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Form<span class="token punctuation">,</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token string">'#my-form'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>Read <a href="https://uppy.io/docs/form/">more about the Form plugin</a> in docs.</p><h2 id="Encoding-support-in-GoldenRetriever"><a href="#Encoding-support-in-GoldenRetriever" class="headerlink" title="Encoding support in GoldenRetriever"></a>Encoding support in GoldenRetriever</h2><p>Our browser crash / page refresh restore plugin <code>GoldenRetriever</code> (read <a href="https://uppy.io/docs/golden-retriever/">more about it</a>) now supports correctly restoring <a href="https://transloadit.com" target="_blank" rel="noopener">Transloadit</a> assemblies!</p><p>Also, we&#x2019;ve fixed restoring from paused state. Now uploads will remain paused and not get out of sync.</p><h2 id="Type-safe-Server"><a href="#Type-safe-Server" class="headerlink" title="Type-safe Server"></a>Type-safe Server</h2><p>Uppy Server now uses TypeScript to do some type checking at compile time. This helps spot some otherwise easy to miss runtime bugs. While the project&#x2019;s source is still written in JavaScript, the use of <a href="https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files" target="_blank" rel="noopener">JSDoc specifications is leveraged by TypeScript</a> to detect data types and mistakes with that, within the project.</p><p>Thanks to this approach a number of hidden bugs have already been identified and fixed, and it also makes Uppy Server very well documented. :)</p><h2 id="And-there&#x2019;s-more"><a href="#And-there&#x2019;s-more" class="headerlink" title="And there&#x2019;s more"></a>And there&#x2019;s more</h2><ul><li>New <code>setFileState</code> method as a nice shorthand to update file-specific state.</li><li>Added more extensions for mimetype detection.</li><li>More plugin documentation &#x1F44D;</li><li>Misc bugs fixes and improvements in Webcam, Dashboard, Provider, so things should be more stable all around.</li><li>Added an option to limit simultaneous uploads in XHRUpload.</li><li>Fixed remote server error handler for uppy-server.</li><li>Added <a href="https://snyk.io/" target="_blank" rel="noopener">Snyk</a> to uppy-server to aid vulnerability detection.</li></ul><h2 id="Full-Changelog"><a href="#Full-Changelog" class="headerlink" title="Full Changelog"></a>Full Changelog</h2><p><a id="changelog-toggle" href="javascript:document.getElementById(&apos;changelog&apos;).style.display = &apos;block&apos;; document.getElementById(&apos;changelog-toggle&apos;).style.display = &apos;none&apos;; false;" target="_blank" rel="noopener">&#xBB; show</a></p><div id="changelog" style="display: none;" markdown="1"><br>Here is the full list of changes for version <code>0.22.0</code> (and patch <code>0.21.1</code>):<br><br>- <strong>&#x26A0;&#xFE0F; Breaking</strong> core: rendering engine switched from <code>Yo-Yo</code> to <code>Preact</code>, and all views from <code>html</code> hyperx template strings to <code>JSX</code> (#451 / @arturi)<br>- <strong>&#x26A0;&#xFE0F; Breaking</strong> core: large refactor of Core and Plugins: <code>setFileState</code>, merge <code>MetaData</code> plugin into <code>Dashboard</code>, prefix &#x201C;private&#x201D; core methods with underscores (@arturi / #438)<br>- <strong>&#x26A0;&#xFE0F; Breaking</strong> core: renamed <code>core</code> to <code>uppy</code> in plugins and what not. So instead of <code>this.core.state</code> we now use <code>this.uppy.state</code> (#438 / @arturi)<br>- <strong>&#x26A0;&#xFE0F; Breaking</strong> core: renamed events to remove <code>core:</code> prefix, as been suggested already. So: <code>success</code>, <code>error</code>, <code>upload-started</code> and so on, and prefixed event names for plugins sometimes, like <code>dashboard:file-card</code> (#438 / @arturi)<br>- <strong>&#x26A0;&#xFE0F; Breaking</strong> core: CSS class names have been altered to use <code>uppy-</code> namespace, so <code>.UppyDashboard-files</code> &#x2013;&gt; <code>.uppy-Dashboard-files</code> and so on<br>- <strong>&#x26A0;&#xFE0F; Breaking</strong> dashboard: added <code>metaFields</code> option, pass an array of settings for UI field objects <code>{ id: &apos;caption&apos;, name: &apos;Caption&apos;, placeholder: &apos;describe what the image is about&apos; }</code> (#438 / @arturi, @goto-bus-stop)<br>- <strong>&#x26A0;&#xFE0F; Breaking</strong> core: deprecate <code>getMetaFromForm</code> in favor of new <code>Form</code> plugin (#407 / @arturi)<br>- form: added <code>Form</code>, a new plugin that is used in conjunction with any acquirer, responsible for: 1. acquiring the metadata from <code>&lt;form&gt;</code> when upload starts in Uppy; 2. injecting result array of succesful and failed files back into the form (#407 / @arturi)<br>- core: add more extensions for mimetype detection (#452 / @ifedapoolarewaju)<br>- docs: more docs for plugins (#456 / @goto-bus-stop)<br>- core: misc bugs fixes and improvements in Webcam, Dashboard, Provider and others (#451 / @arturi)<br>- dashboard: improved Dashboard UI (@arturi)<br>- uppy-server: remove pause/resume socket listeners when upload is done (@ifedapoolarewaju)<br>- uppy/uppy-server: remote server error handler (#446 / @ifedapoolarewaju)<br>- provider: fix dropbox thumbnail view (@ifedapoolarewaju)<br>- uppy-server: link uppy-server with <a href="https://snyk.io/" target="_blank" rel="noopener">https://snyk.io/</a> to aid vulnerability spotting (@ifedapoolarewaju)<br>- <strong>&#x26A0;&#xFE0F; Breaking</strong> core: Set <code>this.el</code> in <code>Plugin</code> class (#425 / @arturi)<br>- StatusBar, Dashboard and Provider UI improvements place upload button into StatusBar, use Alex&#x2019;s suggestions for retry button; other UI tweaks (#434 / @arturi)<br>- XHRUpload: fix fields in XHR remote uploader (#424 / @sadovnychyi)<br>- XHRUpload: option to limit simultaneous uploads #360 (#427 / goto-bus-stop)<br>- core: Add <code>isSupported()</code> API for providers (#421 / @goto-bus-stop, @arturi)<br>- core: Add stores. Improve on Redux PR #216 to allow using Redux (or any other solution) for all Uppy state management, instead of proxy-only (#426 / @goto-bus-stop)<br>- core: add ability to disable thumbnail generation (#432 / @richardwillars)<br>- core: allow to select multiple files at once from remote providers (#419 / @sadovnychyi)<br>- core: use <code>setPluginState</code> and <code>getPluginState</code> in Providers (#436 / @arturi)<br>- docs: uppy-server docs for s3 <code>getKey</code> option (#444 / @goto-bus-stop)<br>- goldenretriever: Fix IndexedDB store initialisation when not cleaning up (#430 / @goto-bus-stop)<br>- provider: folder deselection did not remove all files (#439 / @ifedapoolarewaju)<br>- s3: Use Translator for localised strings (420 / @goto-bus-stop )<br>- transloadit: Port old tests from tape (#428 / @goto-bus-stop)<br>- tus: Restore correctly from paused state (#443 / @goto-bus-stop)<br>- uppy-server: use typescript to compile code for a type safe servers (@ifedapoolarewaju)<br><br></div><p>We expect our 1.0 release early next year. Want to impact it? Comment below, in <a href="https://github.com/transloadit/uppy/issues" target="_blank" rel="noopener">GitHub issues</a>, or on <a href="https://www.producthunt.com/posts/uppy-io" target="_blank" rel="noopener">Product Hunt</a>.</p><p>Happy Holidays,</p><p>The Uppy Team</p><center><br>  <iframe src="https://ghbtns.com/github-btn.html?user=transloadit&amp;repo=uppy&amp;type=watch&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20"></iframe><br></center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Uppy is &lt;a href=&quot;https://www.producthunt.com/posts/uppy-io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;featured on Product Hunt&lt;/a&gt;! To our fellow hunters: welcome! Quick intro: Uppy is the next open source file uploader for web browsers. We’re very close to launching 1.0 and would love to get your feedback in, leave your thoughts on Product Hunt or start a discussion below.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hi all! It’s New Year and Christmas time, and this year Santa is brining you Uppy &lt;code&gt;0.22&lt;/code&gt; 🎁 This release packs a lot of neat stuff, but it also breaks things in quite a few places, so please read on.&lt;/p&gt;
&lt;p&gt;And, if you are celebrating, happy holidays from the Uppy Team! 🎄&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.21: End to End Tests, Accessibility, Additional Security for Uppy Server</title>
    <link href="https://uppy.io/blog/2017/11/0.21/"/>
    <id>https://uppy.io/blog/2017/11/0.21/</id>
    <published>2017-11-24T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Hi all! We&#x2019;ve been busy with Halloween, but also another release, so here is Uppy <code>0.21</code>! This one improves accessibility, features new end-to-end tests and improved security in Uppy Server.</p><a id="more"></a><h2 id="Accessibility"><a href="#Accessibility" class="headerlink" title="Accessibility"></a>Accessibility</h2><p>One of the goals we&#x2019;ve set out to achieve with Uppy was to make an accessibe file upload widget, and in this release we&#x2019;ve achieved some more progress in this area:</p><ul><li>Dashboard modal dialog now handles focus better (it&#x2019;s trapped inside the modal while open);</li><li>First button is in focus right after the modal dialog is open;</li><li>More (aria-)labels have been added;</li><li>Files from remote providers are now selectable with a keyboard.</li></ul><p>We plan to continue gradually improving in the accessibility area.</p><p>See <a href="https://github.com/transloadit/uppy/pull/414" target="_blank" rel="noopener">#414 PR</a> for details.</p><h2 id="Returning-successful-failed-from-uppy-upload"><a href="#Returning-successful-failed-from-uppy-upload" class="headerlink" title="Returning { successful, failed } from uppy.upload()"></a>Returning <code>{ successful, failed }</code> from <code>uppy.upload()</code></h2><p><strong>&#x26A0;&#xFE0F; Breaking change</strong></p><p><code>uppy.upload()</code> promise now resolves to a <code>result</code> object with two arrays of files: <code>{ successful, failed }</code>. This lets you handle succesful and failed uploads in one go:  </p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Successful uploads:'</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>successful<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>failed<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Errors:'</span><span class="token punctuation">)</span>    result<span class="token punctuation">.</span>failed<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// or</span>uppy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'core:complete'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> successful<span class="token punctuation">,</span> failed <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'UPLOAD SUCCESSFUL!!!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'UPLOAD FAILED!!!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'successful files:'</span><span class="token punctuation">,</span> successful<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'failed files:'</span><span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>See <a href="https://uppy.io/docs/uppy/#uppy-upload"><code>uppy.upload()</code></a> and <a href="https://uppy.io/docs/uppy/#core-complete"><code>core:complete</code></a> in docs, as well as <a href="https://github.com/transloadit/uppy/pull/404" target="_blank" rel="noopener">#404 PR</a> for more details.</p><h2 id="End-to-end-tests"><a href="#End-to-end-tests" class="headerlink" title="End to end tests"></a>End to end tests</h2><p>We&#x2019;ve refactored end to end tests to use <a href="http://webdriver.io" target="_blank" rel="noopener">Webdriver.io</a>, and for the occasion added tests for Edge, Safari, Android and iOS. Now tests on Travis and Sauce Labs (thanks for the open source tier!) run smoothly and it&#x2019;s easier to alter them or write new ones.</p><h2 id="More-secure-Uppy-Server"><a href="#More-secure-Uppy-Server" class="headerlink" title="More secure Uppy Server"></a>More secure Uppy Server</h2><p>We made sure access tokens from third-party providers, such as Google Drive or Instagram, are not stored on the server with Uppy Server, and kept in your browser instead. Then, when you want to pick a file from your Instagram, the token is used to make a request. Even though they live on the browser, these tokens are encrypted with JWT on the server side, before they are being sent to the client. So they can only be decrypted and understood on the server side.</p><p>Data validation is also now done during intiation of an upload, to prevent corrupt data from triggering funny behaviours on the server. :)</p><p>And, while we were at this, we also made sure all sensitive data is masked in request logs.</p><h2 id="Migration-to-Dropbox-v2-API"><a href="#Migration-to-Dropbox-v2-API" class="headerlink" title="Migration to Dropbox v2 API"></a>Migration to Dropbox v2 API</h2><p>Since the <a href="https://blogs.dropbox.com/developers/2017/09/api-v1-shutdown-details/" target="_blank" rel="noopener">deprecation of Dropbox v1 API</a>, uppy/uppy-server have now been updated to use the v2 API. It is implemented to work closely as its previous implementation so there should be no worries.</p><h2 id="Custom-plugin-id"><a href="#Custom-plugin-id" class="headerlink" title="Custom plugin id"></a>Custom plugin id</h2><p>Up until now you could only use a plugin once with an Uppy instance. Now you can pass custom <code>id</code> for any plugin (though this has to be manually implemented in any new plugin). This allows using, for example, two <code>StatusBar</code>s, one inside the <code>Dashboard</code>, and one somewhere on the page, visible even when <code>Dashboard</code> is closed.</p><p>Can be used like this:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token comment">// one StatusBar comes included in the Dashboard, another will be mounted on the page</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Dashboard <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>StatusBar<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'PageStatusBar'</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token string">'body'</span> <span class="token punctuation">}</span></pre></td></tr></table></figure><p>See <a href="https://github.com/transloadit/uppy/pull/418" target="_blank" rel="noopener">#418 PR</a> for details.</p><h2 id="Misc-good-stuff"><a href="#Misc-good-stuff" class="headerlink" title="Misc good stuff"></a>Misc good stuff</h2><ul><li>Migrated Dropbox in Uppy Server to use v2 API.</li><li>Fixed generating thumbnails for images with transparent background.</li><li>We are now using <a href="https://github.com/goto-bus-stop/tinyify" target="_blank" rel="noopener"><code>tinyify</code></a>(by our own <a href="https://github.com/goto-bus-stop" target="_blank" rel="noopener">@goto-bus-stop</a>) for the Uppy bundle to make it smaller and more efficient.</li><li>Instead of restarting only the file upload itself, start an entirely new upload for retries. Fixes retrying uploads with processing plugins.</li><li>The S3 plugin now includes XHRUpload. <strong>&#x26A0;&#xFE0F; Breaking change: you should remove <code>.use(XHRUpload)</code> when using S3.</strong></li><li>XHRUpload now includes a timeout <code>opts.timeout = 30000</code>, after which it errors and offers a retry (retry UI supported in Dashboard), see <a href="https://github.com/transloadit/uppy/pull/378" target="_blank" rel="noopener">#378</a> for more.</li><li>Renamed <code>RestoreFiles</code> &#x2192; <code>GoldenRetriever</code>, and <code>Tus10</code> &#x2192; <code>Tus</code>. <strong>&#x26A0;&#xFE0F; Breaking change: please make sure to use the new names when setting up plugins</strong>.</li><li>The Webcam plugin has been refactored. There&#x2019;s no flash fallback now, it works in modern browsers only, and the Webcam tab won&#x2019;t appear in the Dashboard if a camera is not supported on the device.</li></ul><h2 id="Full-Changelog"><a href="#Full-Changelog" class="headerlink" title="Full Changelog"></a>Full Changelog</h2><p>Here is the full list of changes for version <code>0.21.0</code> (and patches <code>0.20.1</code>, <code>0.20.2</code>, <code>0.20.3</code>):</p><ul><li>accessibility: add tabindex=&#x201D;0&#x201D; to buttons and tabs, aria-labels, focus (#414 / @arturi)</li><li>core: allow setting custom <code>id</code> for plugins to allow a plugin to be used multiple times (#418 / @arturi)</li><li>core: do not check isPreviewSupported for unknown filetypes (#417 / @sadovnychyi)</li><li>core: refactor <code>uppy-base</code> (#382 / @goto-bus-stop)</li><li>core: remove functions from state object (#408 / @goto-bus-stop)</li><li>core: return <code>{ successful, failed }</code> from <code>uppy.upload()</code> (#404 / @goto-bus-stop)</li><li>core: update state with error messages rather than error objects (#406 / @richardwillars)</li><li>core: use <code>tinyify</code> for the unpkg bundle. (#371 / @goto-bus-stop)</li><li>dashboard: Fix pasting files, default <code>image</code> file name, add type to meta, file type refactor (#395 / @arturi)</li><li>dragdrop: Fix of the .uppy-DragDrop-inner spacing on small screens (#405 / @nqst)</li><li>react: fix <code>uppy</code> PropType, closes (#416 / @goto-bus-stop)</li><li>s3: automatically wrap XHRUpload. Users should remove <code>.use(XHRUpload)</code> when using S3. (#408 / @goto-bus-stop)</li><li>test: refactored end-to-end tests to not use website, switched to Webdriver.io, added tests for Edge, Safari, Android and iOS (#410 / @arturi)</li><li>tus: Rename Tus10 &#x2192; Tus (#285 / @goto-bus-stop)</li><li>uppy-serer: mask sensitive data from request logs (@ifedapoolarewaju)</li><li>uppy-server: add request body validators (@ifedapoolarewaju)</li><li>uppy-server: migrate dropbox to use v2 API (#386 / @ifedapoolarewaju)</li><li>uppy-server: store tokens in user&#x2019;s browser only (@ifedapoolarewaju)</li><li>webcam: only show the webcam tab when browser support is available (media recorder API) (#421 / @arturi, @goto-bus-stop)</li><li>webcam: simplify and refactor webcam plugin (modern browser APIs only) (#382 / @goto-bus-stop)</li><li>xhrupload: set a timeout in the onprogress event handler to detect stale network (#378 / @goto-bus-stop)</li><li>uppy-server: allow flexible whitelist endpoint protocols (@ifedapoolarewaju)</li><li>core: Start a completely new upload when retrying. (#390 / @goto-bus-stop)</li><li>dashboard: Show errors that occurred during processing on the file items. (#391 / @goto-bus-stop)</li><li>transloadit: Mark files as having errored if their assembly fails. (#392 / @goto-bus-stop)</li><li>core: Clear file upload progress when an upload starts. (#393 / @goto-bus-stop)</li><li>tus: Clean up <code>tus.Upload</code> instance and events when an upload starts, finishes, or fails. (#390 / @goto-bus-stop)</li><li>docs: fix <code>getMetaFromForm</code> documentation (@arturi)</li><li>core: fix generating thumbnails for images with transparent background (#380 / @goto-bus-stop)</li><li>transloadit: use Translator class for localised strings (#383 / @goto-bus-stop)</li><li>goldenretriever: don&#x2019;t crash when required server-side (#384 / @goto-bus-stop)</li><li>redux: add plugin for syncing uppy state with a Redux store (#376 / @richardwillars)</li></ul><p>The Uppy Team</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi all! We’ve been busy with Halloween, but also another release, so here is Uppy &lt;code&gt;0.21&lt;/code&gt;! This one improves accessibility, features new end-to-end tests and improved security in Uppy Server.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.20: React, Retry &amp; Time Travel</title>
    <link href="https://uppy.io/blog/2017/10/0.20/"/>
    <id>https://uppy.io/blog/2017/10/0.20/</id>
    <published>2017-10-05T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>We are proud to present Uppy <code>0.20</code>. This one focuses on React and Redux support, adding storage expirations to <code>GoldenRetriever</code> and upload retries. Enjoy!</p><h2 id="Uppy-React-components"><a href="#Uppy-React-components" class="headerlink" title="Uppy React components"></a>Uppy React components</h2><p>Uppy now ships with React components! We&#x2019;ve been exploring different approaches to React components for several months, so we&#x2019;re excited to finally have them in &#x2728; There are components for each of Uppy&#x2019;s UI elements, like the Dashboard and the StatusBar.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> uppy <span class="token operator">=</span> <span class="token function">Uppy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Tus10<span class="token punctuation">,</span> <span class="token punctuation">{</span> endpoint<span class="token punctuation">:</span> <span class="token string">'/upload'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> Dashboard <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy/lib/react/Dashboard'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Uploader</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Dashboard    uppy<span class="token operator">=</span><span class="token punctuation">{</span>uppy<span class="token punctuation">}</span>    note<span class="token operator">=</span><span class="token string">"Hey! It's a React component!"</span>  <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Uploader <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#uploader'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><a id="more"></a><p><a href="/docs/react/">Check out the docs for more!</a></p><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p><a href="https://github.com/richardwillars" target="_blank" rel="noopener">@richardwillars</a> contributed a plugin that will sync Uppy&#x2019;s internal state with an existing Redux store.<br>To use it, define a Redux action and reducer:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token comment">// The action creator receives 3 parameters:</span><span class="token comment">// - The previous state</span><span class="token comment">// - The new state</span><span class="token comment">// - The change set</span><span class="token keyword">const</span> <span class="token function-variable function">uppyStateUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">previous<span class="token punctuation">,</span> next<span class="token punctuation">,</span> patch</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'UPPY_STATE_UPDATE'</span><span class="token punctuation">,</span>  previous<span class="token punctuation">,</span>  next<span class="token punctuation">,</span>  patch<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">reduce</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'UPPY_STATE_UPDATE'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      <span class="token comment">// Merge in the changes.</span>      <span class="token operator">...</span>action<span class="token punctuation">.</span>patch    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></pre></td></tr></table></figure><p>Then pass your Redux store&#x2019;s <code>dispatch</code> function and the action creator to the Redux plugin:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> ReduxStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy/lib/Redux'</span><span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ReduxStore<span class="token punctuation">,</span> <span class="token punctuation">{</span>  dispatch<span class="token punctuation">:</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">,</span>  action<span class="token punctuation">:</span> uppyStateUpdate<span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><a href="/docs/redux/">See the docs</a></p><h2 id="Redux-DevTools"><a href="#Redux-DevTools" class="headerlink" title="Redux DevTools"></a>Redux DevTools</h2><p>Even if you&#x2019;re not using Redux in your application, there&#x2019;s some Redux-related news! Uppy now has a new plugin, <code>ReduxDevTools</code>, which adds debug support for Redux DevTools and allows you to time travel while debugging Uppy:</p><figure class="wide"><video alt="Demo video showing Uppy with Redux Dev Tools and time traveling" controls autoplay><source src="/images/blog/0.20/uppy-reduxdevtools.mp4" type="video/mp4">Your browser does not support the video tag, you can <a href="/images/blog/0.20/uppy-reduxdevtools.mp4">download the video</a> to watch it.</video></figure><p>To try it, add the plugin:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> ReduxDevTools <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy/lib/plugins/ReduxDevTools'</span><span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ReduxDevTools<span class="token punctuation">)</span></pre></td></tr></table></figure><p>And then <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">activate the browser extension</a>.</p><p>See <a href="https://github.com/transloadit/uppy/pull/373" target="_blank" rel="noopener">#373</a> for details and discussion.</p><h2 id="Retries"><a href="#Retries" class="headerlink" title="Retries"></a>Retries</h2><p>We&#x2019;ve added a retry UI to the <code>Dashboard</code>. If some of your uploads fail&#x2014;maybe the network is down or the endpoint is unresponsive&#x2014;you&#x2019;ll see this:</p><p><img alt="Uppy Dashboard retry UI with individual retry buttons and &#x201C;retry all&#x201D;" src="/images/blog/0.20/retry.jpg"></p><p>From here it&#x2019;s easy to retry individual uploads or all at once. This feature currenty works best with <code>Tus10</code> plugin, and has basic <code>XHRUpload</code> support, but we&#x2019;ll improve on the latter in the future releases.</p><h2 id="Re-designed-Drag-and-Drop-plugin"><a href="#Re-designed-Drag-and-Drop-plugin" class="headerlink" title="Re-designed Drag and Drop plugin"></a>Re-designed Drag and Drop plugin</h2><p>The old trustly <code>DragDrop</code> plugin has been re-designed by <a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a> and <a href="http://zaytsev.io" target="_blank" rel="noopener">@nqst</a>:</p><ul><li>Fresh simple design, arrow icon, white background;</li><li>New sizing options: <code>width</code> and <code>height</code> (both <code>100%</code> by default to fill the entire container space);</li><li>A <code>note</code> option, like in the <code>Dashboard</code>, to add info about restrictions or anything else you would like your users to know.</li></ul><p><img class="border" src="/images/blog/0.20/dnd-gray.jpg"></p><p><strong><a href="/examples/dragdrop/">Check it out</a></strong></p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>DragDrop<span class="token punctuation">,</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token string">'body'</span><span class="token punctuation">,</span>  width<span class="token punctuation">:</span> <span class="token string">'600px'</span><span class="token punctuation">,</span>  height<span class="token punctuation">:</span> <span class="token string">'300px'</span><span class="token punctuation">,</span>  note<span class="token punctuation">:</span> <span class="token string">'Videos only, up to 100 MB'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="The-Golden-Retriever-cleans-up-after-itself"><a href="#The-Golden-Retriever-cleans-up-after-itself" class="headerlink" title="The Golden Retriever cleans up after itself"></a>The Golden Retriever cleans up after itself</h2><p>We recently released the <code>GoldenRetriever</code> plugin, which stores selected files on the client so that it can recover them after a browser crash. Previously, these stored files would stay around forever, and clog up the user&#x2019;s disk space. As of 0.20.0, files will be removed from client-side storage when they have been uploaded. Files that have had nothing happen to them for longer than 24 hours will be cleaned up automatically. This timeframe can be configured using the new <code>expires</code> option:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ms'</span><span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>GoldenRetriever<span class="token punctuation">,</span> <span class="token punctuation">{</span>  expires<span class="token punctuation">:</span> <span class="token function">ms</span><span class="token punctuation">(</span><span class="token string">'4 hours'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>(The <a href="https://npmjs.com/package/ms" target="_blank" rel="noopener"><code>ms</code></a> module is great for converting text durations to milliseconds!)</p><p>This will clean up files when Uppy runs, but perhaps not every page of your app uses Uppy. If a user selected some files, but then never came back to that same page, files could still hang around for a long time. To aid this, there&#x2019;s a new module that you can call to clean up Uppy&#x2019;s cache without needing an Uppy instance:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> cleanup <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy/lib/plugins/GoldenRetriever/cleanup'</span><span class="token punctuation">)</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>We&#x2019;ll hopefully make that require path easier to remember in the future :)</p><h2 id="Misc-good-stuff"><a href="#Misc-good-stuff" class="headerlink" title="Misc good stuff"></a>Misc good stuff</h2><ul><li>The GoldenRetriever now detects a serviceWorker registration automatically&#x2014;it&#x2019;s no longer necessary to emit an <code>core:sw-file-ready</code> event.</li><li>Request headers are now configurable in the AWS S3 plugin.</li><li>A new <code>setPluginState</code> allows plugins to set state scoped to the plugin.</li><li>Some unused code was removed &#x1F389;</li><li>More tests were added! Thanks <a href="https://github.com/gavboulton" target="_blank" rel="noopener">@gavboulton</a> and <a href="https://github.com/richardwillars" target="_blank" rel="noopener">@richardwillars</a> &#x1F389;</li><li>Documentation for the <a href="/docs/statusbar">StatusBar</a>, <a href="/docs/xhrupload">XHRUpload</a> and <a href="/docs/tus">Tus</a> plugins.</li></ul><h2 id="Full-Changelog"><a href="#Full-Changelog" class="headerlink" title="Full Changelog"></a>Full Changelog</h2><p>Here is the full list of changes for version <code>0.20.0</code> (and patch <code>0.19.1</code>):</p><ul><li>core: retry/error when upload can&#x2019;t start or fails (offline, connection lost, wrong endpoint); add error in file progress state, UI, question mark button (#307 / @arturi)</li><li>core: support for retry in Tus plugin (#307 / @arturi)</li><li>core: support for retry in XHRUpload plugin (#307 / @arturi)</li><li>core: Add support for Redux DevTools via a plugin (#373 / @arturi)</li><li>core: improve and merge the React PR (#170 / @goto-bus-stop, @arturi)</li><li>core: improve core.log method, add timestamps (#372 / @arturi)</li><li>dragdrop: redesign, add note, width/height options, arrow icon (#374 / @arturi)</li><li>uploaders: upload resolution changes, followup to #323 (#347 / @goto-bus-stop)</li><li>uploaders: issue warning when no uploading plugins are used (#372 / @arturi)</li><li>core: fix <code>replaceTargetContent</code> and add tests for <code>Plugin</code> (#354 / @gavboulton)</li><li>goldenretriever: Omit completed uploads from saved file state&#x2014;previously, when an upload was finished and the user refreshed the page, all the finished files would still be there because we saved the entire list of files. Changed this to only store files that are part of an in-progress upload, or that have yet to be uploaded (#358, #324 / @goto-bus-stop)</li><li>goldenretriever: Remove files from cache when upload finished&#x2014;this uses the deleteBlobs function when core:success fires (#358, #324 / @goto-bus-stop)</li><li>goldenretriever: add a timestamp to cached blobs, and to delete old blobs on boot (#358, #324 / @goto-bus-stop)</li><li>s3: have some way to configure content-disposition for uploads, see #243 (@goto-bus-stop)</li><li>core: move <code>setPluginState</code> and add <code>getPluginState</code> to <code>Plugin</code> class (#363 / @goto-bus-stop)</li><li>goldenretriever: fix restorefiles with id (#351 / @arturi)</li><li>goldenretriever: Clean up blobs that are not related to a file in state (#349 / @goto-bus-stop)</li><li>core: set the newState before emiting <code>core:state-update</code> (#341 / @sunil-shrestha, @arturi)</li><li>docs: Document StatusBar plugin (#350 / @goto-bus-stop)</li></ul><p>The Uppy Team</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We are proud to present Uppy &lt;code&gt;0.20&lt;/code&gt;. This one focuses on React and Redux support, adding storage expirations to &lt;code&gt;GoldenRetriever&lt;/code&gt; and upload retries. Enjoy!&lt;/p&gt;
&lt;h2 id=&quot;Uppy-React-components&quot;&gt;&lt;a href=&quot;#Uppy-React-components&quot; class=&quot;headerlink&quot; title=&quot;Uppy React components&quot;&gt;&lt;/a&gt;Uppy React components&lt;/h2&gt;&lt;p&gt;Uppy now ships with React components! We’ve been exploring different approaches to React components for several months, so we’re excited to finally have them in ✨ There are components for each of Uppy’s UI elements, like the Dashboard and the StatusBar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;const uppy = Uppy()
uppy.use(Tus10, { endpoint: &amp;#39;/upload&amp;#39; })

const Dashboard = require(&amp;#39;uppy/lib/react/Dashboard&amp;#39;)
const Uploader = () =&amp;gt; (
  &amp;lt;Dashboard
    uppy={uppy}
    note=&amp;quot;Hey! It&amp;#39;s a React component!&amp;quot;
  /&amp;gt;
)

ReactDOM.render(&amp;lt;Uploader /&amp;gt;, document.querySelector(&amp;#39;#uploader&amp;#39;))
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.19: Tests, Informer details and better APIs</title>
    <link href="https://uppy.io/blog/2017/09/0.19/"/>
    <id>https://uppy.io/blog/2017/09/0.19/</id>
    <published>2017-09-21T00:00:00.000Z</published>
    <updated>2019-04-02T15:04:25.518Z</updated>
    
    <content type="html"><![CDATA[<p>Hello! The <code>0.19</code> release is about internal fixes, optimizations and refactoring, as well as some work on PRs that we&#x2019;ll hopefully tell you about soon!</p><h2 id="Jest-tests"><a href="#Jest-tests" class="headerlink" title="Jest tests"></a>Jest tests</h2><p>Thanks to our contributer, <a href="https://github.com/richardwillars" target="_blank" rel="noopener">@richardwillars</a>, and following the example set by Uppy Server, we&#x2019;ve <a href="https://github.com/transloadit/uppy/pull/310" target="_blank" rel="noopener">switched to Jest</a> for Uppy&#x2019;s unit tests, and added a bunch of new tests as well. And even more are being <a href="https://github.com/transloadit/uppy/pull/346" target="_blank" rel="noopener">added</a> as we speak!</p><p>We&#x2019;re also happy to report that <a href="https://github.com/transloadit/uppy-server/compare/3341a9592d0723fd9b58ec77d8c762f20b434704...d3c6f5b409d08f588d1704b77181e5c0342ca322" target="_blank" rel="noopener">more tests</a> have been added for Uppy Server.</p><h2 id="Dashboard-APIs"><a href="#Dashboard-APIs" class="headerlink" title="Dashboard APIs"></a>Dashboard APIs</h2><p>We&#x2019;ve exposed <code>show/hide/isOpen</code> APIs for the Dashboard UI plugin. Now you can open and close the modal dialog programmatically:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">var</span> modal <span class="token operator">=</span> uppy<span class="token punctuation">.</span><span class="token function">getPlugin</span><span class="token punctuation">(</span><span class="token string">'Dashboard'</span><span class="token punctuation">)</span>modal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modal<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    modal<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    modal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>Check out <a href="https://uppy.io/docs/dashboard/#Methods">the docs</a>.</p><a id="more"></a><h2 id="Transloadit"><a href="#Transloadit" class="headerlink" title="Transloadit"></a>Transloadit</h2><ul><li>Possibility to upload to S3, then import into an assembly;</li><li>New <code>alwaysRunAssembly</code> option has beed added to run assemblies when no files are uploaded.</li></ul><h2 id="Informer-details"><a href="#Informer-details" class="headerlink" title="Informer details"></a>Informer details</h2><p>Informer supports &#x201C;explanations&#x201D;, a questionmark (?) button that shows more info on hover / click.</p><p><img class="border" src="/images/blog/0.19/informer-details.jpg"></p><h2 id="Misc-good-stuff"><a href="#Misc-good-stuff" class="headerlink" title="Misc good stuff"></a>Misc good stuff</h2><ul><li>Uppy instance ID, useful for GoldenRetriver, check out <a href="https://github.com/transloadit/uppy/tree/master/examples/multiple-instances" target="_blank" rel="noopener">example using multiple Uppy instances</a>;</li><li>Custom error messages from upload endpoints are now supported (#305);</li><li>Fixed <code>calculateTotalProgress</code> and <code>restrictions</code>; improved <code>generateFileID</code> and <code>isOnline</code>;</li><li>Removed some unused css styles from the bundle;</li><li>Allow multiple <code>trigger</code> elements for the Dashboard, via using the same <code>class</code> attribute;</li><li>Image previews are now resized gradually for better performance and quality;</li><li>Metadata edits in the Dashboard are now saved when pressing enter key;</li></ul><h2 id="Full-Changelog"><a href="#Full-Changelog" class="headerlink" title="Full Changelog"></a>Full Changelog</h2><p>Here is the full list of changes for version <code>0.19</code> (and patch <code>0.18.1</code>):</p><ul><li>core: gradually resize image previews (#275 / @goto-bus-stop)</li><li>informer: support &#x201C;explanations&#x201D;, a (?) button that shows more info on hover / click (#292 / @arturi)</li><li>fix webcam video recording (@goto-bus-stop)</li><li>bundle: add missing plugins (s3, statusbar, restorefiles) to unpkg bundle (#301 / @goto-bus-stop)</li><li>xhrupload: Use error messages from the endpoint (#305 / @goto-bus-stop)</li><li>dashboard: prevent submitting outer form when pressing enter key while editing metadata (#306 / @goto-bus-stop)</li><li>dashboard: save metadata edits when pressing enter key (#308 / @arturi)</li><li>transloadit: upload to S3, then import into :tl: assembly using <code>/add_file?s3url=${url}</code> (#280 / @goto-bus-stop)</li><li>transloadit: add <code>alwaysRunAssembly</code> option to run assemblies when no files are uploaded (#290 / @goto-bus-stop)</li><li>core: use <code>iteratePlugins</code> inside <code>updateAll</code> (#312 / @richardwillars)</li><li>core: improve error when plugin does not have ID (#309 / @richardwillars)</li><li>tus: Clear stored <code>uploadUrl</code> on <code>uppy.resetProgress()</code> call (#314 / @goto-bus-stop)</li><li>website: simplify examples and code samples, prevent sidebar subheading links anywhere but in docs (@arturi)</li><li>website: group plugin docs together in the sidebar (@arturi)</li><li>goldenretriever: allow passing options to <code>IndexedDbStore</code> (#339 / sunil-shrestha)</li><li>core: add Uppy instance ID option, namespace serviceWorker action types, add example using multiple Uppy instances with GoldenRetriever (#333 / @goto-bus-stop)</li><li>core: fix <code>calculateTotalProgress</code> - NaN (#342 / @arturi)</li><li>core: fix and refactor <code>restrictions</code> (#345 / @arturi)</li><li>core: Better <code>generateFileID</code> (#330 / @arturi)</li><li>core: improve <code>isOnline()</code> (#319 / @richardwillars)</li><li>core: remove unused bootstrap styles (#329 / @arturi)</li><li>core: experiment with yo-yo &#x2013;&gt; preact and picodom (#297 / @arturi)</li><li>dashboard: fix FileItem source icon position and copy (@arturi)</li><li>dashboard: expose and document the <code>show/hide/isOpen</code> API (@arturi)</li><li>dashboard: allow multiple <code>trigger</code> of the same class <code>.open-uppy</code> (#328 / @arturi)</li><li>plugins: add <code>aria-hidden</code> to all SVG icons for accessibility (#4e808ca3d26f06499c58bb77abbf1c3c2b510b4d / @arturi)</li><li>core: Handle sync returns and throws in possibly-async function options (#315 / @goto-bus-stop)</li><li>core: switch to Jest tests, add more tests for Core and Utils (#310 / @richardwillars)</li><li>website: Minify bundle for <code>disc</code> (#332 / @goto-bus-stop)</li><li>transloadit: remove <code>this.state</code> getter (#331 / @goto-bus-stop)</li><li>server: option to define valid upload urls (@ifedapoolarewaju)</li><li>server: more automated tests (@ifedapoolarewaju)</li></ul><p>The Uppy Team</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello! The &lt;code&gt;0.19&lt;/code&gt; release is about internal fixes, optimizations and refactoring, as well as some work on PRs that we’ll hopefully tell you about soon!&lt;/p&gt;
&lt;h2 id=&quot;Jest-tests&quot;&gt;&lt;a href=&quot;#Jest-tests&quot; class=&quot;headerlink&quot; title=&quot;Jest tests&quot;&gt;&lt;/a&gt;Jest tests&lt;/h2&gt;&lt;p&gt;Thanks to our contributer, &lt;a href=&quot;https://github.com/richardwillars&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@richardwillars&lt;/a&gt;, and following the example set by Uppy Server, we’ve &lt;a href=&quot;https://github.com/transloadit/uppy/pull/310&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;switched to Jest&lt;/a&gt; for Uppy’s unit tests, and added a bunch of new tests as well. And even more are being &lt;a href=&quot;https://github.com/transloadit/uppy/pull/346&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;added&lt;/a&gt; as we speak!&lt;/p&gt;
&lt;p&gt;We’re also happy to report that &lt;a href=&quot;https://github.com/transloadit/uppy-server/compare/3341a9592d0723fd9b58ec77d8c762f20b434704...d3c6f5b409d08f588d1704b77181e5c0342ca322&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;more tests&lt;/a&gt; have been added for Uppy Server.&lt;/p&gt;
&lt;h2 id=&quot;Dashboard-APIs&quot;&gt;&lt;a href=&quot;#Dashboard-APIs&quot; class=&quot;headerlink&quot; title=&quot;Dashboard APIs&quot;&gt;&lt;/a&gt;Dashboard APIs&lt;/h2&gt;&lt;p&gt;We’ve exposed &lt;code&gt;show/hide/isOpen&lt;/code&gt; APIs for the Dashboard UI plugin. Now you can open and close the modal dialog programmatically:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;var modal = uppy.getPlugin(&amp;#39;Dashboard&amp;#39;)
modal.show()

...

button.addEventListener(&amp;#39;click&amp;#39;, () =&amp;gt; {
  if (modal.isOpen()) {
    modal.hide()
  } else {
    modal.show()
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://uppy.io/docs/dashboard/#Methods&quot;&gt;the docs&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
